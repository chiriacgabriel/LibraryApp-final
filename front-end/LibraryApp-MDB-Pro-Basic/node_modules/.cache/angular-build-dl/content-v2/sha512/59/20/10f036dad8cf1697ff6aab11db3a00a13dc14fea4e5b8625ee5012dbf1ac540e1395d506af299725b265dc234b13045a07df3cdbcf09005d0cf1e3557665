{"version":3,"sources":["webpack:///src/app/model/AuthorImageUrl.ts","webpack:///src/app/model/Author.ts","webpack:///src/app/_services/client.service.ts","webpack:///src/app/_services/profile.service.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/user/user.component.ts","webpack:///src/app/user/user.component.html","webpack:///src/app/_services/book.service.ts","webpack:///src/app/_services/reload-page.service.ts","webpack:///src/app/_core/client/client.component.ts","webpack:///src/app/_core/client/client.component.html","webpack:///src/app/_errors/not-found/not-found.component.ts","webpack:///src/app/_errors/not-found/not-found.component.html","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_core/book/book.component.ts","webpack:///src/app/_core/book/book.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/_core/author/author-details/author-details.component.ts","webpack:///src/app/_core/author/author-details/author-details.component.html","webpack:///src/app/_services/role.service.ts","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/_core/media/media.component.ts","webpack:///src/app/_core/media/media.component.html","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/dashboard/stats-card/stats-card.component.ts","webpack:///src/app/dashboard/stats-card/stats-card.component.html","webpack:///src/app/_services/user.service.ts","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/_services/alerts.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/_services/book-image-url.service.ts","webpack:///src/app/_core/reservation/reservation.component.ts","webpack:///src/app/_core/reservation/reservation.component.html","webpack:///src/app/_core/author/author.component.ts","webpack:///src/app/_core/author/author.component.html","webpack:///src/app/_services/author-image-url.service.ts","webpack:///src/app/_services/reservation-state.service.ts","webpack:///src/app/_services/reservation.service.ts","webpack:///src/app/_services/author.service.ts","webpack:///src/app/_services/book-category-type.service.ts","webpack:///src/app/_helpers/auth.interceptor.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/_services/stats.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["AuthorImageUrl","Author","API_URL","httpOptions","headers","ClientService","http","get","client","post","firstName","lastName","email","phoneNumber","id","put","providedIn","API_URL_PROFILE_IMAGE","ProfileService","file","formData","FormData","append","req","reportProgress","responseType","request","RegisterComponent","authService","modalRefRegister","modalService","form","isSuccessful","isSignUpFailed","errorMessage","validatingForm","modalFormElegantEmail","modalFormElegantPassword","required","modalFormElegantName","modalFormElegantLastName","register","subscribe","data","hide","show","err","error","message","selector","templateUrl","styleUrls","UserComponent","userService","roleService","alertsService","users","listRoleSelected","isResetPasswordFailed","getAllUsers","getAllRole","getUsers","JSON","parse","getRole","listRoles","console","log","user","modalDirective","toggle","userForm","name","password","roleSet","index","findIndex","value","editUserById","response","ngOnInit","success","undefined","idTable","title","text","icon","buttons","dangerMode","then","willDelete","obj","deleteUser","splice","role","push","BookService","book","author","stock","bookImageUrl","bookCategory","fictional","nonfictional","ReloadPageService","router","currentUrl","url","navigateByUrl","skipLocationChange","navigate","ClientComponent","clientService","reloadPageService","clients","isClientAlreadyExists","getClients","formClient","addClientForm","editClientForm","getAllClients","addClient","reload","find","editClientById","deleteClientById","NotFoundComponent","AUTH_API","AuthService","credentials","BookComponent","bookImageUrlService","bookCategoryTypeService","bookService","authorService","sanitizer","bookImages","bookCategories","fictionals","nonfictionals","books","authors","isErrorSelected","isFictional","isNonfictional","preSelectedTitle","getAllBookImages","getAllBooks","getAllAuthors","getAllBookCategories","getAllFictionals","getAllNonfictionals","formBook","addBookForm","bookImageSelected","i","bookCategorySelected","authorSelected","editBookForm","setValue","fictionalSelected","nonfictionalSelected","getAllImageBook","forEach","imageBook","imageUrl","bypassSecurityTrustResourceUrl","getAllFictional","getAllNonfictional","addBook","editBookById","deleteBookById","Number","warning","nameOfBookCategory","HomeComponent","tokenStorage","getToken","modalRef","openModalLogin","openModalRegister","environment","production","AuthorDetailsComponent","activatedRoute","authorImageUrl","snapshot","paramMap","getAuthorById","bookSet","image","RoleService","TOKEN_KEY","USER_KEY","TokenStorageService","window","sessionStorage","clear","token","removeItem","setItem","getItem","stringify","MediaComponent","authorImageUrlService","authorImages","errorMessageAuthor","isAuthorTitlePresent","errorMessageBook","isBookTitlePresent","navigationSubscription","events","e","getAllAuthorImages","authorForm","bookForm","bookImageSubscription","unsubscribe","authorImageSubscription","authorImageForm","getAllImages","imageAuthor","currentFile","selectedFiles","item","createImageUrl","deleteImageById","bookImageForm","length","event","target","files","addBookImageUrl","deleteBookImageById","DashboardComponent","tokenStorageService","profileService","isLoggedIn","showAdminBoard","showModeratorBoard","getUser","roles","includes","getImageProfileAvatar","signOut","getProfileImageByUserId","profileImageAvatar","logout","sendToProfile","AppComponent","StatsCardComponent","statsService","getCountOfAuthors","getCountOfUsers","getCountOfBooks","getCountOfReservations","getAuthorsCount","countAuthors","getUsersCount","countUsers","getBooksCount","countBooks","getReservationsCount","countReservations","UserService","profilePhoto","ProfileComponent","reservationService","alertService","elements","isElements","headElements","searchText","reservations","page","pageSize","isNewImageUser","getImageProfile","searchItems","getAllReservationsByUserId","mdbTable","setDataSource","previous","getDataSource","currentUser","profileImageSubscription","prev","searchLocalDataBy","params","getRequestParams","getReservationsByUserId","content","count","totalElements","populateTable","j","bookList","startDate","endDate","reservationState","nameOfState","reader","FileReader","onload","newImageUser","result","readAsDataURL","updateProfileImage","imageId","imageUser","showPreviewImageProfile","update","handlePageChange","oninput","AlertsService","toast","options","timeOut","AppModule","forRoot","apiKey","provide","useFactory","declarations","imports","entryComponents","providers","bootstrap","schemas","BookImageUrlService","searchClient","ReservationComponent","tokenService","formBuilder","reservationStateService","selectedBook","updateSelectedBook","userList","clientList","reservationStateList","reservationList","isCanceled","isFinalised","group","items","bookTableRows","array","formReservation","getAllReservationState","getAllUser","getAllReservations","addControl","createItemFormGroup","rowIndex","removeAt","reservationForm","reservation","clientSelected","reservationStateSelected","editReservationForm","bookSelected","controls","created","finalised","canceled","filteredOptionsClient","pipe","filterClient","getAllReservationsFromDb","filterValue","toLowerCase","filter","getAllStates","addReservation","editReservationById","object","showReservationFrame","changeDetection","Default","AuthorComponent","imageUrlList","errorMessageAddAuthor","isAuthorAlreadyExist","getAuthors","getImageUrlAuthors","formAuthor","dateForm","dateBirth","deathDate","addAuthorForm","dateOfBirth","nationality","description","type","authorImageSelected","editAuthorForm","addAuthor","editAuthorById","deleteAuthorById","AuthorImageUrlService","ReservationStateService","API_URL_PROFILE","ReservationService","userId","AuthorService","API_URL_FICTIONAL","API_URL_NONFICTIONAL","API_URL_BOOK_CATEGORY","BookCategoryTypeService","TOKEN_HEADER_KEY","AuthInterceptor","next","authReq","clone","set","handle","authInterceptorProviders","useClass","multi","routes","path","redirectTo","pathMatch","component","children","runGuardsAndResolvers","AppRoutingModule","onSameUrlNavigation","exports","LoginComponent","isLoginFailed","login","saveToken","saveUser","reloadPage","API_URL_AUTHOR","API_URL_USER","API_URL_BOOK","API_URL_RESERVATION","StatsService","bootstrapModule","webpackEmptyAsyncContext","Promise","resolve","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import {Author} from './Author';\r\n\r\nexport class AuthorImageUrl {\r\n  id: number;\r\n  title: string;\r\n  imageUrl: any;\r\n}\r\n","import {Book} from './Book';\r\nimport {AuthorImageUrl} from './AuthorImageUrl';\r\n\r\nexport class Author{\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  dateOfBirth: string;\r\n  nationality: string;\r\n  description: string;\r\n  type: string;\r\n  authorImageUrl: AuthorImageUrl;\r\n  bookSet: Book[];\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Client} from '../model/Client';\r\n\r\nconst API_URL = 'http://localhost:8080/api/clients/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClientService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllClients(): Observable<Client>{\r\n    return this.http.get<Client>(API_URL);\r\n  }\r\n\r\n  addClient(client: Client): Observable<Client>{\r\n    return this.http.post<Client>(API_URL,{\r\n      firstName: client.firstName,\r\n      lastName: client.lastName,\r\n      email: client.email,\r\n      phoneNumber: client.phoneNumber\r\n    }, httpOptions);\r\n  }\r\n\r\n  editClientById(id: number, client: Client): Observable<Client>{\r\n    return this.http.put<Client>(API_URL + id,{\r\n      firstName: client.firstName,\r\n      lastName: client.lastName,\r\n      email: client.email,\r\n      phoneNumber: client.phoneNumber\r\n    },httpOptions);\r\n  }\r\n\r\n  getClientById(id: number){\r\n    return this.http.get<Client>(API_URL + id);\r\n  }\r\n\r\n  deleteClientById(id: number): Observable<Client> {\r\n    return this.http.delete<Client>(API_URL + id);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {User} from '../model/User';\n\nconst API_URL = 'http://localhost:8080/api/users/';\nconst API_URL_PROFILE_IMAGE = 'http://localhost:8080/api/profile-image/';\nconst httpOptions = {\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfileService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  updateProfileImage(file: File, id: number): Observable<any> {\n    const formData: FormData = new FormData();\n    formData.append('file', file);\n\n\n    const req = new HttpRequest('PUT', API_URL_PROFILE_IMAGE + id, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n\n    return this.http.request(req);\n  }\n\n  getProfileImageByUserId(id: number) {\n    return this.http.get(API_URL_PROFILE_IMAGE + id);\n  }\n\n}\n","import {Component, OnInit} from '@angular/core';\r\nimport {AuthService} from '../_services/auth.service';\r\nimport {MDBModalRef, MDBModalService} from 'ng-uikit-pro-standard';\r\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {LoginComponent} from '../login/login.component';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n    form: any = {};\r\n    isSuccessful = false;\r\n    isSignUpFailed = false;\r\n    errorMessage = '';\r\n\r\n    validatingForm: FormGroup;\r\n\r\n    constructor(private authService: AuthService,\r\n                public modalRefRegister: MDBModalRef,\r\n                private modalService: MDBModalService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.validatingForm = new FormGroup({\r\n            modalFormElegantEmail: new FormControl('', Validators.email),\r\n            modalFormElegantPassword: new FormControl('', Validators.required),\r\n            modalFormElegantName: new FormControl('', Validators.required),\r\n            modalFormElegantLastName: new FormControl('', Validators.required)\r\n        });\r\n    }\r\n\r\n    onSubmit(): void {\r\n        this.authService.register(this.form).subscribe(\r\n            data => {\r\n                this.isSuccessful = true;\r\n                this.isSignUpFailed = false;\r\n                this.modalRefRegister.hide();\r\n                this.modalService.show(LoginComponent);\r\n\r\n            },\r\n            err => {\r\n                this.errorMessage = err.error.message;\r\n                this.isSignUpFailed = true;\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    get modalFormElegantEmail() {\r\n        return this.validatingForm.get('modalFormElegantEmail');\r\n    }\r\n\r\n    get modalFormElegantPassword() {\r\n        return this.validatingForm.get('modalFormElegantPassword');\r\n    }\r\n\r\n    get modalFormElegantLastName() {\r\n        return this.validatingForm.get('modalFormElegantLastName');\r\n    }\r\n\r\n    get modalFormElegantName() {\r\n        return this.validatingForm.get('modalFormElegantName');\r\n    }\r\n}\r\n","\r\n<!--Content-->\r\n<div class=\"modal-content form-elegant\">\r\n  <!--Header-->\r\n  <div class=\"modal-header text-center\">\r\n    <h3 class=\"modal-title w-100 dark-grey-text font-weight-bold my-3\" id=\"myModalLabel\">\r\n      <strong>Register</strong>\r\n    </h3>\r\n    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n            (click)=\"modalRefRegister.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <!--Body-->\r\n  <form *ngIf=\"!isSuccessful\"\r\n  name=\"form\"\r\n  (ngSubmit)=\"f.form.valid && onSubmit()\"\r\n  #f=\"ngForm\"\r\n  novalidate>\r\n\r\n  <div class=\"modal-body mx-4\">\r\n    <!--Body-->\r\n\r\n    <div class=\"md-form mb-5\">\r\n      <input type=\"text\" id=\"Form-name\" class=\"form-control\"\r\n             name=\"name\"\r\n             [(ngModel)]=\"form.name\"\r\n             mdbInput\r\n             mdbValidate\r\n             [formControl]=\"modalFormElegantName\">\r\n      <label for=\"Form-name\">Name</label>\r\n      <mdb-error\r\n              *ngIf=\"modalFormElegantName.invalid && (modalFormElegantName.dirty || modalFormElegantName.touched)\">\r\n        Input invalid\r\n      </mdb-error>\r\n      <mdb-success\r\n              *ngIf=\"modalFormElegantName.valid && (modalFormElegantName.dirty || modalFormElegantName.touched)\">Input\r\n        valid\r\n      </mdb-success>\r\n    </div>\r\n\r\n    <div class=\"md-form mb-5\">\r\n      <input type=\"text\" id=\"Form-lastName\" class=\"form-control\"\r\n             name=\"lastname\"\r\n             [(ngModel)]=\"form.lastName\"\r\n             mdbInput\r\n             mdbValidate\r\n             [formControl]=\"modalFormElegantLastName\">\r\n      <label for=\"Form-lastName\">Last Name</label>\r\n      <mdb-error\r\n        *ngIf=\"modalFormElegantLastName.invalid && (modalFormElegantLastName.dirty || modalFormElegantLastName.touched)\">\r\n        Input invalid\r\n      </mdb-error>\r\n      <mdb-success\r\n        *ngIf=\"modalFormElegantLastName.valid && (modalFormElegantLastName.dirty || modalFormElegantLastName.touched)\">Input\r\n        valid\r\n      </mdb-success>\r\n    </div>\r\n\r\n    <div class=\"md-form mb-5\">\r\n      <input type=\"email\" id=\"Form-email1\" class=\"form-control\"\r\n             name=\"email\"\r\n             [(ngModel)]=\"form.email\"\r\n             mdbInput\r\n             mdbValidate\r\n             [formControl]=\"modalFormElegantEmail\">\r\n      <label for=\"Form-email1\">Your email</label>\r\n      <mdb-error\r\n        *ngIf=\"modalFormElegantEmail.invalid && (modalFormElegantEmail.dirty || modalFormElegantEmail.touched)\">\r\n        Input invalid\r\n      </mdb-error>\r\n      <mdb-success\r\n        *ngIf=\"modalFormElegantEmail.valid && (modalFormElegantEmail.dirty || modalFormElegantEmail.touched)\">Input\r\n        valid\r\n      </mdb-success>\r\n    </div>\r\n\r\n    <div class=\"md-form pb-3\">\r\n      <input type=\"password\" id=\"Form-pass1\" class=\"form-control\"\r\n             name=\"password\"\r\n             [(ngModel)]=\"form.password\"\r\n             mdbInput\r\n             mdbValidate\r\n             [formControl]=\"modalFormElegantPassword\">\r\n      <label for=\"Form-pass1\">Your password</label>\r\n      <mdb-error\r\n        *ngIf=\"modalFormElegantPassword.invalid && (modalFormElegantPassword.dirty || modalFormElegantPassword.touched)\">\r\n        Input invalid\r\n      </mdb-error>\r\n      <mdb-success\r\n        *ngIf=\"modalFormElegantPassword.valid && (modalFormElegantPassword.dirty || modalFormElegantPassword.touched)\">\r\n        Input valid\r\n      </mdb-success>\r\n      <p class=\"font-small blue-text d-flex justify-content-end\">Forgot\r\n        <a href=\"#\" class=\"blue-text ml-1\"> Password?</a>\r\n      </p>\r\n    </div>\r\n\r\n    <div class=\"text-center mb-3\">\r\n      <button type=\"submit\" mdbBtn gradient=\"blue\" block=\"true\" rounded=\"true\"\r\n              class=\"z-depth-1a waves-light\"\r\n              mdbWavesEffect>Sign up\r\n      </button>\r\n    </div>\r\n\r\n    <p class=\"font-small dark-grey-text text-right d-flex justify-content-center mb-3 pt-2\"> or Sign in\r\n      with:</p>\r\n    <div class=\"row my-3 d-flex justify-content-center\">\r\n      <!--Facebook-->\r\n      <button type=\"button\" mdbBtn color=\"white\" rounded=\"true\" class=\"mr-md-3 z-depth-1a waves-light\"\r\n              mdbWavesEffect>\r\n        <mdb-icon fab icon=\"facebook-f\" class=\"text-center\"></mdb-icon>\r\n      </button>\r\n      <!--Twitter-->\r\n      <button type=\"button\" mdbBtn color=\"white\" rounded=\"true\" class=\"mr-md-3 z-depth-1a waves-light\"\r\n              mdbWavesEffect>\r\n        <mdb-icon fab icon=\"twitter\"></mdb-icon>\r\n      </button>\r\n      <!--Google +-->\r\n      <button type=\"button\" mdbBtn color=\"white\" rounded=\"true\" class=\"z-depth-1a waves-light\"\r\n              mdbWavesEffect>\r\n        <mdb-icon fab icon=\"google-plus\"></mdb-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\r\n      Signup failed!<br />{{ errorMessage }}\r\n    </div>\r\n\r\n  </div>\r\n  </form>\r\n  <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\r\n    Your registration is successful !\r\n  </div>\r\n  <!--Footer-->\r\n  <div class=\"modal-footer mx-5 pt-3 mb-1\">\r\n    <p class=\"font-small grey-text d-flex justify-content-end\">Not a member?\r\n      <a href=\"#\" class=\"blue-text ml-1\"> Sign Up</a>\r\n    </p>\r\n  </div>\r\n</div>\r\n<!--/.Content-->\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Role} from '../model/Role';\r\nimport {UserService} from '../_services/user.service';\r\nimport {RoleService} from '../_services/role.service';\r\nimport {User} from '../model/User';\r\nimport {ModalDirective} from 'ng-uikit-pro-standard';\r\nimport {AlertsService} from '../_services/alerts.service';\r\nimport swal from 'sweetalert';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html',\r\n  styleUrls: ['./user.component.scss']\r\n})\r\nexport class UserComponent implements OnInit {\r\n  users = [];\r\n  userForm: FormGroup;\r\n  listRoles: any;\r\n  listRoleSelected: Role[] = [];\r\n  errorMessage = '';\r\n  isResetPasswordFailed = false;\r\n\r\n  constructor(private userService: UserService,\r\n              private roleService: RoleService,\r\n              private alertsService: AlertsService) {\r\n  }\r\n\r\n  get password() {\r\n    return this.userForm.get('password');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAllUsers();\r\n    this.getAllRole();\r\n\r\n  }\r\n\r\n  getAllUsers() {\r\n    this.userService.getUsers().subscribe((data: any[]) => {\r\n        this.users = data;\r\n      },\r\n      err => {\r\n        this.users = JSON.parse(err.error).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  getAllRole() {\r\n    this.roleService.getRole().subscribe(data => {\r\n        this.listRoles = data;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  editUser(user: User, modalDirective: ModalDirective) {\r\n    modalDirective.toggle();\r\n\r\n    this.userForm = new FormGroup({\r\n      id: new FormControl(user.id),\r\n      name: new FormControl(user.name),\r\n      lastName: new FormControl(user.lastName),\r\n      email: new FormControl(user.email),\r\n      password: new FormControl('', Validators.required),\r\n      roleSet: new FormControl(this.listRoleSelected)\r\n    });\r\n  }\r\n\r\n  resetPassword(modalDirective: ModalDirective): void {\r\n\r\n    const index = this.users.findIndex(user => user.id == this.userForm.value.id);\r\n    this.users[index] = this.userForm.value;\r\n    const id = this.users[index].id;\r\n\r\n    this.userService.editUserById(id, this.users[index]).subscribe(response => {\r\n\r\n        this.ngOnInit();\r\n        modalDirective.toggle();\r\n        this.alertsService.success();\r\n\r\n        this.isResetPasswordFailed = false;\r\n\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isResetPasswordFailed = true;\r\n      });\r\n  }\r\n\r\n  saveUser(modalDirective: ModalDirective): void {\r\n    modalDirective.toggle();\r\n\r\n    const index = this.users.findIndex(user => user.id == this.userForm.value.id);\r\n    this.users[index] = this.userForm.value;\r\n    const id = this.users[index].id;\r\n\r\n    this.userService.editUserById(id, this.users[index]).subscribe(response => {\r\n        this.ngOnInit();\r\n        this.alertsService.success();\r\n      },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n\r\n    this.listRoleSelected = undefined;\r\n  }\r\n\r\n  deleteUser(user: User, idTable: number) {\r\n\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'Once deleted, you will not be able to recover this registration!',\r\n      icon: 'warning',\r\n      buttons: ['Cancel', 'Ok'],\r\n      dangerMode: true,\r\n    })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n\r\n          const index = this.users.findIndex(obj => obj.id = user.id);\r\n          const id = this.users[index].id;\r\n\r\n          this.userService.deleteUser(id).subscribe(response => {\r\n              this.ngOnInit();\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            });\r\n\r\n          this.users.splice(idTable, 1);\r\n\r\n          swal('Your registration/file has been deleted!', {\r\n            icon: 'success',\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n\r\n  selectedObject(role: Role) {\r\n    this.listRoleSelected.push(role);\r\n  }\r\n\r\n}\r\n","<!-- Editable table -->\r\n<div class=\"card\">\r\n  <h3 class=\"card-header text-center font-weight-bold text-uppercase py-4\">Users Profile</h3>\r\n  <div class=\"card-body\">\r\n    <div class=\"table-editable\" id=\"table\">\r\n\r\n      <table class=\"table table-bordered table-responsive-md table-striped text-center\">\r\n        <tr>\r\n          <th class=\"text-center\">Name</th>\r\n          <th class=\"text-center\">Last Name</th>\r\n          <th class=\"text-center\">Email</th>\r\n          <th class=\"text-center\">Role</th>\r\n          <th class=\"text-center\">Password</th>\r\n          <th class=\"text-center\">Edit</th>\r\n          <th class=\"text-center\">Remove</th>\r\n        </tr>\r\n        <tr *ngFor=\"let user of users; let idTable = index\">\r\n          <td>\r\n            <span>{{user.name}}</span>\r\n          </td>\r\n\r\n          <td>\r\n            <span>{{user.lastName}}</span>\r\n          </td>\r\n\r\n          <td>\r\n            <span>{{user.email}}</span>\r\n          </td>\r\n\r\n          <td>\r\n            <span *ngFor=\"let role of user.roleSet\">{{role.nameOfRole}}</span>\r\n          </td>\r\n\r\n          <td>\r\n            <span class=\"table-remove\" >\r\n              <button (click)=\"editUser(user,resetFrame)\" class=\"my-0\" color=\"default\" mdbBtn\r\n                      rounded=\"true\" size=\"sm\"\r\n                      type=\"button\">\r\n                Reset Password</button>\r\n            </span>\r\n\r\n          </td>\r\n\r\n          <td>\r\n            <span class=\"table-remove\">\r\n              <button (click)=\"editUser(user,editFrame)\" class=\"my-0\" color=\"warning\"\r\n                      mdbBtn\r\n                      mdbWavesEffect\r\n                      rounded=\"true\" size=\"sm\" type=\"button\">\r\n                Edit</button>\r\n            </span>\r\n          </td>\r\n\r\n          <td>\r\n            <span class=\"table-remove\">\r\n              <button (click)=\"deleteUser(user,idTable)\" class=\"my-0\" color=\"danger\" mdbBtn\r\n                      rounded=\"true\"\r\n                      size=\"sm\"\r\n                      type=\"button\">\r\n                Remove</button>\r\n            </span>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- Editable table -->\r\n\r\n<!-- Modal Edit User -->\r\n<div #editFrame=\"mdbModal\" aria-hidden=\"false\" aria-labelledby=\"myModalLabel\" class=\"modal fade top\" id=\"frameModalTop\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Header-->\r\n      <ng-container *ngIf=\"userForm\">\r\n        <div class=\"modal-header text-center custom-header-modal\">\r\n          <img src=\"./assets/images/edit-user-profile.png\" class=\"mx-auto\">\r\n          <button (click)=\"editFrame.hide()\" aria-label=\"Close\" class=\"close\" data-dismiss=\"modal\"\r\n                  type=\"button\">\r\n            <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <!--Body-->\r\n        <div class=\"modal-body\">\r\n\r\n          <form (ngSubmit)=\"saveUser(editFrame)\" [formGroup]=\"userForm\">\r\n\r\n            <div class=\"form-group\">\r\n              <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n              <label class=\"col-sm-2 col-form-label\" for=\"name\">Name</label>\r\n              <input class=\"form-control\" formControlName=\"name\" id=\"name\" type=\"text\">\r\n\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n              <label class=\"col-sm-3 col-form-label\" for=\"lastName\">Last name</label>\r\n              <input class=\"form-control\" formControlName=\"lastName\" id=\"lastName\"\r\n                     type=\"text\">\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <mdb-icon class=\"prefix grey-text\" fas icon=\"envelope\"></mdb-icon>\r\n              <label class=\"col-sm-2 col-form-label\" for=\"email\">Email</label>\r\n              <input class=\"form-control\" formControlName=\"email\" id=\"email\" type=\"text\">\r\n            </div>\r\n\r\n            <div class=\"form-group \">\r\n              <mdb-icon fas icon=\"universal-access\" class=\"prefix grey-text\"></mdb-icon>\r\n              <label for=\"role\" class=\"col-sm-2 col-form-label\">Role</label>\r\n              <select id=\"role\" class=\"form-control\" >\r\n                <option *ngFor=\"let role of listRoles\" [value]=\"role\"\r\n                        (click)=\"selectedObject(role)\">\r\n                  {{role.nameOfRole}}\r\n                </option>\r\n              </select>\r\n            </div>\r\n\r\n            <div class=\"justify-content-center\" style=\"display: flex\">\r\n              <button mdbBtn type=\"submit\" style=\"background: brown; color: white\"\r\n                      rounded=\"true\" mdbWavesEffect>Save\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Modal ResetPassword -->\r\n<div #resetFrame=\"mdbModal\" aria-hidden=\"false\" aria-labelledby=\"myModalLabel\"\r\n     class=\"modal fade top\" id=\"frameModalTopResetPassword\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog modal-notify modal-warning\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Header-->\r\n\r\n      <ng-container *ngIf=\"userForm\">\r\n        <div class=\"modal-header text-center\">\r\n          <h4 class=\"modal-title white-text w-100 font-weight-bold py-2\">Reset Password</h4>\r\n          <button (click)=\"resetFrame.hide()\" aria-label=\"Close\" class=\"close\" data-dismiss=\"modal\"\r\n                  type=\"button\">\r\n            <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <!--Body-->\r\n        <div class=\"modal-body\">\r\n\r\n          <form (ngSubmit)=\"rstPassword.form.valid && resetPassword(resetFrame)\"\r\n                [formGroup]=\"userForm\" #rstPassword = \"ngForm\">\r\n\r\n            <div class=\"form-group\">\r\n              <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n              <label class=\"col-sm-2 col-form-label\" for=\"password\">Password</label>\r\n              <input class=\"form-control\" formControlName=\"password\" id=\"password\" type=\"password\">\r\n\r\n              <mdb-error\r\n                *ngIf=\"password.invalid && (password.dirty || password.touched)\">\r\n                Password invalid\r\n              </mdb-error>\r\n\r\n            </div>\r\n\r\n            <div class=\"alert alert-warning\" *ngIf=\"rstPassword.submitted && isResetPasswordFailed\">\r\n              Reset Password failed !<br />{{ errorMessage }}\r\n            </div>\r\n\r\n            <div class=\"justify-content-center\" style=\"display: flex\">\r\n              <button mdbBtn type=\"submit\" color=\"warning\" rounded=\"true\" mdbWavesEffect >\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Book} from '../model/Book';\r\n\r\nconst API_URL = 'http://localhost:8080/api/books/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllBooks(): Observable<Book> {\r\n    return this.http.get<Book>(API_URL);\r\n  }\r\n\r\n  getBookById(id: number): Observable<Book>{\r\n    return this.http.get<Book>(API_URL + id);\r\n  }\r\n  addBook(book: Book): Observable<Book> {\r\n    return this.http.post<Book>(API_URL, {\r\n      title: book.title,\r\n      author: book.author,\r\n      stock: book.stock,\r\n      bookImageUrl: book.bookImageUrl,\r\n      bookCategory: book.bookCategory,\r\n      fictional: book.fictional,\r\n      nonfictional: book.nonfictional\r\n    }, httpOptions);\r\n  }\r\n\r\n  editBookById(id: number, book: Book): Observable<Book>{\r\n    return this.http.put<Book>(API_URL + id, {\r\n      title: book.title,\r\n      author: book.author,\r\n      stock: book.stock,\r\n      bookImageUrl: book.bookImageUrl,\r\n      bookCategory: book.bookCategory,\r\n      fictional: book.fictional,\r\n      nonfictional: book.nonfictional\r\n    }, httpOptions);\r\n  }\r\n\r\n  deleteBookById(id: number): Observable<Book>{\r\n    return this.http.delete<Book>(API_URL + id);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Router} from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReloadPageService {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  reload(){\r\n    const currentUrl = this.router.url;\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate([currentUrl]);\r\n    });\r\n  }\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ClientService} from '../../_services/client.service';\r\nimport {FormControl, FormGroup} from '@angular/forms';\r\nimport {AlertsService} from '../../_services/alerts.service';\r\nimport {ModalDirective} from 'ng-uikit-pro-standard';\r\nimport {Client} from '../../model/Client';\r\nimport swal from 'sweetalert';\r\nimport {ReloadPageService} from '../../_services/reload-page.service';\r\n\r\n@Component({\r\n  selector: 'app-client',\r\n  templateUrl: './client.component.html',\r\n  styleUrls: ['./client.component.scss']\r\n})\r\nexport class ClientComponent implements OnInit {\r\n\r\n  clients = [];\r\n  addClientForm: FormGroup;\r\n  editClientForm: FormGroup;\r\n  errorMessage = '';\r\n  isClientAlreadyExists = false;\r\n\r\n\r\n  constructor(private clientService: ClientService,\r\n              private alertsService: AlertsService,\r\n              private reloadPageService: ReloadPageService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getClients();\r\n    this.formClient();\r\n  }\r\n\r\n  formClient() {\r\n    this.addClientForm = new FormGroup({\r\n      firstName: new FormControl(''),\r\n      lastName: new FormControl(''),\r\n      email: new FormControl(''),\r\n      phoneNumber: new FormControl('')\r\n    });\r\n  }\r\n\r\n  editFormClient(modalDirective: ModalDirective, client: Client) {\r\n    modalDirective.toggle();\r\n\r\n    this.editClientForm = new FormGroup({\r\n      id: new FormControl(client.id),\r\n      firstName: new FormControl(client.firstName),\r\n      lastName: new FormControl(client.lastName),\r\n      email: new FormControl(client.email),\r\n      phoneNumber: new FormControl(client.phoneNumber)\r\n    });\r\n  }\r\n\r\n  getClients() {\r\n    this.clientService.getAllClients().subscribe((data: any) => {\r\n        this.clients = data;\r\n      },\r\n      err => {\r\n        this.clients = JSON.parse(err.message).message;\r\n      });\r\n  }\r\n\r\n  addClient(modalDirective: ModalDirective) {\r\n    this.clientService.addClient(this.addClientForm.value).subscribe(response => {\r\n        this.alertsService.success();\r\n        this.isClientAlreadyExists = false;\r\n        modalDirective.toggle();\r\n        this.reloadPageService.reload();\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isClientAlreadyExists = true;\r\n      });\r\n  }\r\n\r\n  updateClient(modalDirective: ModalDirective) {\r\n    const index = this.clients.find(client => client.id == this.editClientForm.value.id);\r\n    this.clients[index] = this.editClientForm.value;\r\n    const id = this.clients[index].id;\r\n\r\n    this.clientService.editClientById(id, this.clients[index]).subscribe(response => {\r\n        this.alertsService.success();\r\n        modalDirective.toggle();\r\n        this.reloadPageService.reload();\r\n        this.isClientAlreadyExists = false;\r\n      },\r\n      err => {\r\n        this.errorMessage = err.error.message;\r\n        this.isClientAlreadyExists = true;\r\n      });\r\n  }\r\n\r\n  deleteClient(client: Client) {\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'Once deleted, you will not be able to recover this registration!',\r\n      icon: 'warning',\r\n      buttons: ['Cancel', 'Ok'],\r\n      dangerMode: true,\r\n    })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          this.clientService.deleteClientById(client.id).subscribe(response => {\r\n            this.reloadPageService.reload();\r\n          }, error => {\r\n            console.log(error);\r\n          });\r\n          swal('Your registration/file has been deleted!', {\r\n            icon: 'success',\r\n          });\r\n        }\r\n      });\r\n  }\r\n}\r\n","<!-- Navbar Client-->\r\n<mdb-navbar\r\n  SideClass=\"navbar fixed-top-author navbar-toggleable-md navbar-expand-lg scrolling-navbar double-nav grey lighten-5 navbar-dark\"\r\n  [containerInside]=\"false\">\r\n  <navlinks class=\"navbar-container\">\r\n    <mdb-icon class=\"fas-author\" fas icon=\"user-friends\"></mdb-icon>\r\n  </navlinks>\r\n  <navlinks class=\"navbar-container\">\r\n    <span class=\"clearfix d-none d-sm-inline-block span-client\">Clients</span>\r\n  </navlinks>\r\n  <navlinks>\r\n    <ul class=\"nav navbar-nav nav-flex-icons ml-auto ie-double-nav\">\r\n      <li class=\"nav-item\">\r\n        <button (click)=\"clientFrame.toggle()\" color=\"primary\" mdbBtn mdbWavesEffect rounded=\"true\"\r\n                size=\"md\"\r\n                type=\"button\">Add Client\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </navlinks>\r\n</mdb-navbar>\r\n<!-- End navbar -->\r\n\r\n<!-- Modal Edit Book -->\r\n<div #clientFrame=\"mdbModal\" aria-hidden=\"false\" aria-labelledby=\"myModalLabel\"\r\n     class=\"modal fade top\"\r\n     id=\"frameModalClient\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Header-->\r\n      <div class=\"modal-header text-center custom-header-modal\">\r\n\r\n        <img class=\"mx-auto\" src=\"./assets/images/add-client.png\">\r\n\r\n        <button (click)=\"clientFrame.hide()\" aria-label=\"Close\" class=\"close\"\r\n                data-dismiss=\"modal\"\r\n                type=\"button\">\r\n          <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <!--Body-->\r\n      <div class=\"modal-body\">\r\n        <form (ngSubmit)=\"addClient(clientFrame)\" [formGroup]=\"addClientForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"user-alt\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"firstName\">First Name</label>\r\n                <input class=\"form-control\" formControlName=\"firstName\"\r\n                       id=\"firstName\" type=\"text\">\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"user-alt\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"lastName\">Last Name</label>\r\n                <input class=\"form-control\" formControlName=\"lastName\"\r\n                       id=\"lastName\" type=\"text\">\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"envelope\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"email\">Email</label>\r\n                <input class=\"form-control\" formControlName=\"email\" id=\"email\"\r\n                       type=\"email\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"phone-alt\"></mdb-icon>\r\n                <label class=\"col-sm-8 col-form-label\" for=\"phoneNumber\">Phone Number</label>\r\n                <input class=\"form-control\" formControlName=\"phoneNumber\"\r\n                       id=\"phoneNumber\" type=\"text\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"justify-content-center\" style=\"display: flex\">\r\n            <button mdbBtn mdbWavesEffect rounded=\"true\"\r\n                    style=\"background: brown; color: white\" type=\"submit\">Save\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- End modal -->\r\n\r\n<!-- Modal Edit Client -->\r\n<div mdbModal #editClientFrame=\"mdbModal\" class=\"modal fade top\" id=\"editFrameModalClient\" tabindex=\"-1\" role=\"dialog\"\r\n     aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog-scrollable\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <ng-container *ngIf=\"editClientForm\">\r\n        <!--Header-->\r\n        <div class=\"modal-header text-center custom-header-modal\">\r\n          <img src=\"./assets/images/edit-client.png\" class=\"mx-auto\">\r\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" (click)=\"editClientFrame.hide()\">\r\n            <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <!--Body-->\r\n        <div class=\"modal-body\">\r\n          <form [formGroup]=\"editClientForm\" (ngSubmit)=\"updateClient(editClientFrame)\">\r\n            <div class=\"row\">\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"user-alt\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label for=\"editFirstName\" class=\"col-sm-6 col-form-label\">First Name</label>\r\n                  <input type=\"text\" class=\"form-control\" id=\"editFirstName\"\r\n                         formControlName=\"firstName\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"user-alt\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label for=\"editLastName\" class=\"col-sm-6 col-form-label\">Last Name</label>\r\n                  <input type=\"text\" class=\"form-control\" id=\"editLastName\"\r\n                         formControlName=\"lastName\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"envelope\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label for=\"editEmail\" class=\"col-sm-6 col-form-label\">Email</label>\r\n                  <input type=\"text\" class=\"form-control\" id=\"editEmail\"\r\n                         formControlName=\"email\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"phone-alt\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label for=\"editPhoneNumber\" class=\"col-sm-8 col-form-label\">Phone Number</label>\r\n                  <input type=\"text\" class=\"form-control\" id=\"editPhoneNumber\"\r\n                         formControlName=\"phoneNumber\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"justify-content-center\" style=\"display: flex\">\r\n              <button mdbBtn type=\"submit\" style=\"background: brown; color: white\" rounded=\"true\" mdbWavesEffect>Save</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- End Modal Edit Client -->\r\n\r\n\r\n<!-- Content -->\r\n<div class=\"row my-5\">\r\n  <div *ngFor=\"let client of clients\" class=\"col-lg-3 col-md-3\">\r\n    <!--Card-->\r\n    <mdb-card cascade=\"true\">\r\n\r\n      <!--Card image-->\r\n      <div class=\"view view-cascade card-header\" style=\"background: gainsboro\">\r\n        <h2 style=\"color: black; font-weight: 400\">{{client.firstName}}</h2>\r\n      </div>\r\n      <!--/Card image-->\r\n\r\n      <mdb-card-body cascade=\"true\" class=\"text-center\">\r\n        <!--Card content-->\r\n\r\n        <p>\r\n          <span class=\"span-card-body\"><i class=\"fas fa-user\"></i> Full name: </span>\r\n          {{client.firstName}} {{client.lastName}}\r\n        </p>\r\n\r\n        <p>\r\n          <span class=\"span-card-body\"><i class=\"fas fa-envelope\"></i> Email: </span>\r\n          {{client.email}}\r\n        </p>\r\n\r\n        <p>\r\n          <span class=\"span-card-body\"><i class=\"fas fa-phone-alt\"></i> Phone Number: </span>\r\n          {{client.phoneNumber}}\r\n        </p>\r\n\r\n        <p>\r\n          <span class=\"span-card-body\"><i class=\"fas fa-calendar-alt\"></i> Reservations: </span>\r\n          TODO...\r\n        </p>\r\n\r\n      </mdb-card-body>\r\n      <!--/.Card content-->\r\n\r\n      <mdb-card-footer>\r\n        <ul class=\"list-unstyled list-inline font-small\">\r\n          <button class=\"button-newCard\"\r\n                  style=\"color: #2bbbad;\"><i class=\"fas fa-comment\"></i></button>\r\n          <button (click)=\"editFormClient(editClientFrame, client)\" class=\"button-newCard\"\r\n                  style=\"color: #ffbb33;\"><i class=\"fas fa-user-edit\"></i></button>\r\n          <button (click)=\"deleteClient(client)\" class=\"button-newCard\"\r\n                  style=\"color: #ff4444;\"><i class=\"far fa-trash-alt\"></i></button>\r\n        </ul>\r\n      </mdb-card-footer>\r\n    </mdb-card>\r\n    <!--/.Card-->\r\n  </div>\r\n</div>\r\n<!-- End Content -->\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.component.html',\r\n  styleUrls: ['./not-found.component.scss']\r\n})\r\nexport class NotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"full\">\r\n    <div class=\"row \" >\r\n        <div class=\"col-md-8\">\r\n            <h2 class=\"h2-responsive mt-3 mb-2\">404. That's an error.</h2>\r\n            <h4>The requested URL was not found on this server.</h4>\r\n        </div>\r\n        <div class=\"col-md-4\">\r\n            <img src=\"https://mdbootstrap.com/img/Others/grafika404-bf.png\" alt=\"Error 404\" class=\"img-fluid\">\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst AUTH_API = 'http://localhost:8080/api/auth/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(credentials): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signin', {\r\n      email: credentials.email,\r\n      password: credentials.password\r\n    }, httpOptions);\r\n  }\r\n\r\n  register(user): Observable<any> {\r\n    return this.http.post(AUTH_API + 'signup', {\r\n      email: user.email,\r\n      password: user.password,\r\n      name: user.name,\r\n      lastName: user.lastName\r\n    }, httpOptions);\r\n  }\r\n\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {BookImageUrlService} from '../../_services/book-image-url.service';\r\nimport {BookCategoryTypeService} from '../../_services/book-category-type.service';\r\nimport {BookService} from '../../_services/book.service';\r\nimport {ModalDirective} from 'ng-uikit-pro-standard';\r\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {AuthorService} from '../../_services/author.service';\r\nimport {BookCategory} from '../../model/BookCategory';\r\nimport {BookImageUrl} from '../../model/BookImageUrl';\r\nimport {AlertsService} from '../../_services/alerts.service';\r\nimport {Book} from 'src/app/model/Book';\r\nimport swal from 'sweetalert';\r\nimport {ReloadPageService} from '../../_services/reload-page.service';\r\nimport {DomSanitizer} from \"@angular/platform-browser\";\r\n\r\n@Component({\r\n  selector: 'app-book',\r\n  templateUrl: './book.component.html',\r\n  styleUrls: ['./book.component.scss']\r\n})\r\nexport class BookComponent implements OnInit {\r\n\r\n  bookImages = [];\r\n  bookCategories = [];\r\n  fictionals = [];\r\n  nonfictionals = [];\r\n  books = [];\r\n  authors = [];\r\n  addBookForm: FormGroup;\r\n  editBookForm: FormGroup;\r\n\r\n  errorMessage = '';\r\n  isErrorSelected = false;\r\n\r\n  isFictional = false;\r\n  isNonfictional = false;\r\n\r\n  preSelectedTitle = '';\r\n\r\n  constructor(private bookImageUrlService: BookImageUrlService,\r\n              private bookCategoryTypeService: BookCategoryTypeService,\r\n              private bookService: BookService,\r\n              private authorService: AuthorService,\r\n              private alertsService: AlertsService,\r\n              private reloadPageService: ReloadPageService,\r\n              private sanitizer: DomSanitizer) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAllBookImages();\r\n    this.getAllBooks();\r\n    this.getAllAuthors();\r\n    this.getAllBookCategories();\r\n    this.getAllFictionals();\r\n    this.getAllNonfictionals();\r\n    this.formBook();\r\n  }\r\n\r\n  formBook() {\r\n    this.addBookForm = new FormGroup({\r\n      title: new FormControl(''),\r\n      author: new FormControl(''),\r\n      stock: new FormControl('', Validators.required),\r\n      bookImageUrl: new FormControl(''),\r\n      bookCategory: new FormControl(''),\r\n      fictional: new FormControl(),\r\n      nonfictional: new FormControl()\r\n    });\r\n  }\r\n\r\n  editFormBook(book: Book, modalDirective: ModalDirective) {\r\n\r\n    const bookImageSelected = this.bookImages.find(i => i.id == book.bookImageUrl.id);\r\n    const bookCategorySelected = this.bookCategories.find(i => i.id == book.bookCategory.id);\r\n    const authorSelected = this.authors.find(i => i.id == book.author.id);\r\n\r\n    this.editBookForm = new FormGroup({\r\n      id: new FormControl(book.id),\r\n      title: new FormControl(book.title),\r\n      author: new FormControl(book.author),\r\n      stock: new FormControl(book.stock),\r\n      bookImageUrl: new FormControl(book.bookImageUrl),\r\n      bookCategory: new FormControl(book.bookCategory),\r\n      fictional: new FormControl(book.fictional),\r\n      nonfictional: new FormControl(book.nonfictional)\r\n    });\r\n\r\n    this.editBookForm.get('author').setValue(authorSelected);\r\n    this.editBookForm.get('bookImageUrl').setValue(bookImageSelected);\r\n    this.editBookForm.get('bookCategory').setValue(bookCategorySelected);\r\n\r\n    if (book.fictional != null) {\r\n      const fictionalSelected = this.fictionals.find(i => i.id == book.fictional.id);\r\n      this.editBookForm.get('fictional').setValue(fictionalSelected);\r\n      this.isFictional = true;\r\n      this.isNonfictional = false;\r\n\r\n    }\r\n\r\n    if (book.nonfictional != null) {\r\n      const nonfictionalSelected = this.nonfictionals.find(i => i.id == book.nonfictional.id);\r\n      this.editBookForm.get('nonfictional').setValue(nonfictionalSelected);\r\n      this.isNonfictional = true;\r\n      this.isFictional = false;\r\n    }\r\n\r\n    modalDirective.toggle();\r\n  }\r\n\r\n  getAllBookImages() {\r\n    this.bookImageUrlService.getAllImageBook().subscribe((data: any) => {\r\n        this.bookImages = data;\r\n      },\r\n      err => {\r\n        this.bookImages = JSON.parse(err.message).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  getAllAuthors() {\r\n    this.authorService.getAllAuthors().subscribe((data: any) => {\r\n      this.authors = data;\r\n    }, error => {\r\n      this.authors = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getAllBooks() {\r\n    this.bookService.getAllBooks().subscribe((data: any) => {\r\n      this.books = data;\r\n\r\n      this.books.forEach((imageBook: any) => {\r\n        imageBook.bookImageUrl.imageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${imageBook.bookImageUrl.imageUrl}`);\r\n      });\r\n\r\n    }, error => {\r\n      this.books = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getAllBookCategories() {\r\n    this.bookCategoryTypeService.getAllBookCategories().subscribe((data: any) => {\r\n      this.bookCategories = data;\r\n    }, error => {\r\n      this.bookCategories = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getAllFictionals() {\r\n    this.bookCategoryTypeService.getAllFictional().subscribe((data: any) => {\r\n      this.fictionals = data;\r\n    }, error => {\r\n      this.fictionals = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getAllNonfictionals() {\r\n    this.bookCategoryTypeService.getAllNonfictional().subscribe((data: any) => {\r\n        this.nonfictionals = data;\r\n      },\r\n      error => {\r\n        this.nonfictionals = JSON.parse(error.message).message;\r\n      });\r\n  }\r\n\r\n  addBook(modalDirective: ModalDirective) {\r\n\r\n    if (this.addBookForm.value.author == ''){\r\n      this.addBookForm.get('author').setValue(null);\r\n    }\r\n\r\n    if (this.addBookForm.value.bookCategory == ''){\r\n      this.addBookForm.get('bookCategory').setValue(null);\r\n    }\r\n\r\n    this.bookService.addBook(this.addBookForm.value).subscribe(response => {\r\n        this.reloadPageService.reload();\r\n        this.alertsService.success();\r\n        modalDirective.toggle();\r\n        this.isNonfictional = false;\r\n        this.isFictional = false;\r\n        this.isErrorSelected = false;\r\n      },\r\n      error => {\r\n        this.errorMessage = error.error.message;\r\n        this.isErrorSelected = true;\r\n      });\r\n  }\r\n\r\n  updateBook(modalDirective: ModalDirective): void {\r\n    const index = this.books.findIndex(book => book.id == this.editBookForm.value.id);\r\n    this.books[index] = this.editBookForm.value;\r\n    const id = this.books[index].id;\r\n\r\n    this.bookService.editBookById(id, this.books[index]).subscribe(response => {\r\n        this.reloadPageService.reload();\r\n        this.alertsService.success();\r\n        modalDirective.toggle();\r\n\r\n      },\r\n      err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  deleteBook(book: Book) {\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'Once deleted, you will not be able to recover this registration!',\r\n      icon: 'warning',\r\n      buttons: ['Cancel', 'Ok'],\r\n      dangerMode: true,\r\n    })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          this.bookService.deleteBookById(Number(book.id)).subscribe(response => {\r\n              this.reloadPageService.reload();\r\n              this.alertsService.warning();\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            });\r\n          swal('Your registration/file has been deleted!', {\r\n            icon: 'success',\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  isFictionalSelected(bookCategory: BookCategory) {\r\n    if (bookCategory.nameOfBookCategory == 'Fiction') {\r\n      this.isFictional = true;\r\n      this.isNonfictional = false;\r\n    }\r\n\r\n    if (bookCategory.nameOfBookCategory == 'Nonfiction') {\r\n      this.isFictional = false;\r\n      this.isNonfictional = true;\r\n    }\r\n  }\r\n\r\n  getPreSelectedTitle(bookImageUrl: BookImageUrl) {\r\n    this.preSelectedTitle = bookImageUrl.title;\r\n  }\r\n\r\n}\r\n","<!-- Navbar Authors-->\r\n<mdb-navbar\r\n  SideClass=\"navbar fixed-top-author navbar-toggleable-md navbar-expand-lg scrolling-navbar double-nav grey lighten-5 navbar-dark\"\r\n  [containerInside]=\"false\">\r\n  <navlinks class=\"navbar-container\">\r\n    <mdb-icon class=\"fas-author\" fas icon=\"address-book\"></mdb-icon>\r\n  </navlinks>\r\n  <navlinks class=\"navbar-container\">\r\n    <span class=\"clearfix d-none d-sm-inline-block span-book\">Books</span>\r\n  </navlinks>\r\n  <navlinks>\r\n    <ul class=\"nav navbar-nav nav-flex-icons ml-auto ie-double-nav\">\r\n      <li class=\"nav-item\">\r\n        <button (click)=\"bookFrame.toggle()\" color=\"primary\" mdbBtn mdbWavesEffect\r\n                rounded=\"true\"\r\n                size=\"md\" type=\"button\">Add Book\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </navlinks>\r\n</mdb-navbar>\r\n<!-- End navbar -->\r\n\r\n\r\n<!-- Modal Add new Book -->\r\n<div #bookFrame=\"mdbModal\" aria-hidden=\"false\" aria-labelledby=\"myModalLabel\"\r\n     class=\"modal fade top\"\r\n     id=\"bookFrame\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Header-->\r\n      <div class=\"modal-header text-center custom-header-modal\">\r\n\r\n        <img src=\"./assets/images/addBook.png\" class=\"mx-auto\">\r\n\r\n        <button (click)=\"bookFrame.hide()\" aria-label=\"Close\" class=\"close\"\r\n                data-dismiss=\"modal\"\r\n                type=\"button\">\r\n          <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <!--Body-->\r\n      <div class=\"modal-body\">\r\n\r\n        <form #addBookValidate = \"ngForm\"\r\n              (ngSubmit)=\"addBookValidate.submitted && addBook(bookFrame)\"\r\n              [formGroup]=\"addBookForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon fas icon=\"pen-alt\" class=\"prefix grey-text\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"title\">Title</label>\r\n                <input [(ngModel)]=\"preSelectedTitle\" class=\"form-control\" disabled\r\n                       formControlName=\"title\"\r\n                       id=\"title\" type=\"text\">\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon fas icon=\"user-alt\" class=\"prefix grey-text\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"author\">Author</label>\r\n                <select class=\"form-control\" formControlName=\"author\" id=\"author\">\r\n                  <option disabled hidden selected value=\"\">Select author...</option>\r\n                  <option *ngFor=\"let author of authors\" [ngValue]=\"author\">\r\n                    {{author.firstName}} {{author.lastName}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon fas icon=\"check\" class=\"prefix grey-text\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"stock\">Stock</label>\r\n                <input class=\"form-control\" formControlName=\"stock\" id=\"stock\" min=0\r\n                       oninput=\"validity.valid||(value='')\" type=\"number\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon fas icon=\"file-image\" class=\"prefix grey-text\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"bookImageUrl\">Book Image</label>\r\n                <select class=\"form-control\" formControlName=\"bookImageUrl\" id=\"bookImageUrl\">\r\n                  <option disabled selected value=\"\">Select image...</option>\r\n                  <option (click)=\"getPreSelectedTitle(bookImage)\"\r\n                          *ngFor=\"let bookImage of bookImages\"\r\n                          [ngValue]=\"bookImage\">\r\n                    {{bookImage.title}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon fas icon=\"caret-square-right\" class=\"prefix grey-text\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"bookCategory\">Category</label>\r\n                <select class=\"form-control\" formControlName=\"bookCategory\" id=\"bookCategory\">\r\n                  <option disabled hidden selected value=\"\">Select Category...</option>\r\n                  <option (click)=\"isFictionalSelected(category)\"\r\n                          *ngFor=\"let category of bookCategories\"\r\n                          [ngValue]=\"category\">\r\n                    {{category.nameOfBookCategory}}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n\r\n                <div *ngIf=\"isFictional\">\r\n                  <mdb-icon fas icon=\"clipboard-list\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"fictional\">Type</label>\r\n                  <select class=\"form-control\" formControlName=\"fictional\" id=\"fictional\">\r\n                    <option disabled hidden selected value=\"\">Select Type...</option>\r\n                    <option *ngFor=\"let fictional of fictionals\" [ngValue]=\"fictional\">\r\n                      {{fictional.nameOfFictional}}\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div *ngIf=\"isNonfictional\">\r\n                  <mdb-icon fas icon=\"clipboard-list\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"fictional\">Type</label>\r\n                  <select class=\"form-control\" formControlName=\"nonfictional\" id=\"nonfictional\">\r\n                    <option disabled hidden selected value=\"\">Select Type...</option>\r\n                    <option *ngFor=\"let nonfictional of nonfictionals\" [ngValue]=\"nonfictional\">\r\n                      {{nonfictional.nameOfNonfictional}}\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=\"addBookValidate.submitted && isErrorSelected\" class=\"alert alert-warning\">\r\n            {{errorMessage}}\r\n          </div>\r\n\r\n          <div class=\"justify-content-center\" style=\"display: flex\">\r\n            <button mdbBtn mdbWavesEffect style=\"background: brown; color: white\"\r\n                    rounded=\"true\" type=\"submit\">Add\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- End modal -->\r\n\r\n<!-- Modal Edit Book -->\r\n<div #editBookFrame=\"mdbModal\" aria-hidden=\"false\" aria-labelledby=\"myModalLabel\"\r\n     class=\"modal fade top\"\r\n     id=\"editBookFrame\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Header-->\r\n      <div class=\"modal-header text-center custom-header-modal\">\r\n\r\n        <img src=\"./assets/images/edit-book.png\" class=\"mx-auto\">\r\n\r\n        <button (click)=\"editBookFrame.hide()\" aria-label=\"Close\" class=\"close\"\r\n                data-dismiss=\"modal\"\r\n                type=\"button\">\r\n          <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <!--Body-->\r\n      <div class=\"modal-body\">\r\n        <ng-container *ngIf=\"editBookForm\">\r\n          <form (ngSubmit)=\"updateBook(editBookFrame)\" [formGroup]=\"editBookForm\">\r\n            <div class=\"row\">\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"pen-alt\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"editTitle\">Title</label>\r\n                  <input class=\"form-control\" formControlName=\"title\"\r\n                         id=\"editTitle\" type=\"text\">\r\n\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"user-alt\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"editAuthor\">Author</label>\r\n                  <select class=\"form-control\" formControlName=\"author\" id=\"editAuthor\">\r\n                    <option *ngFor=\"let author of authors\" [ngValue]=\"author\">\r\n                      {{author.firstName}} {{author.lastName}}\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"check\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"editStock\">Stock</label>\r\n                  <input class=\"form-control\" formControlName=\"stock\" id=\"editStock\"\r\n                         oninput=\"validity.valid||(value='')\" type=\"number\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"file-image\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"editBookImageUrl\">Book Image</label>\r\n                  <select class=\"form-control\" formControlName=\"bookImageUrl\" id=\"editBookImageUrl\">\r\n                    <option *ngFor=\"let bookImage of bookImages\" [ngValue]=\"bookImage\">\r\n                      {{bookImage.title}}\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon fas icon=\"caret-square-right\" class=\"prefix grey-text\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"editBookCategory\">Category</label>\r\n                  <select class=\"form-control\" formControlName=\"bookCategory\" id=\"editBookCategory\">\r\n                    <option disabled hidden selected value=\"\">Select Category</option>\r\n                    <option (click)=\"isFictionalSelected(category)\"\r\n                            *ngFor=\"let category of bookCategories\"\r\n                            [ngValue]=\"category\">\r\n                      {{category.nameOfBookCategory}}\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <div *ngIf=\"isFictional\">\r\n                    <mdb-icon fas icon=\"clipboard-list\" class=\"prefix grey-text\"></mdb-icon>\r\n                    <label class=\"col-sm-6 col-form-label\" for=\"editFictional\">Type</label>\r\n                    <select class=\"form-control\" formControlName=\"fictional\" id=\"editFictional\">\r\n                      <option disabled hidden selected value=\"\">Select Type</option>\r\n                      <option *ngFor=\"let fictional of fictionals\" [ngValue]=\"fictional\">\r\n                        {{fictional.nameOfFictional}}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div *ngIf=\"isNonfictional\">\r\n                    <mdb-icon fas icon=\"clipboard-list\" class=\"prefix grey-text\"></mdb-icon>\r\n                    <label class=\"col-sm-6 col-form-label\" for=\"editNonfictional\">Type</label>\r\n                    <select class=\"form-control\" formControlName=\"nonfictional\"\r\n                            id=\"editNonfictional\">\r\n                      <option disabled hidden selected value=\"\">Select Type</option>\r\n                      <option *ngFor=\"let nonfictional of nonfictionals\" [ngValue]=\"nonfictional\">\r\n                        {{nonfictional.nameOfNonfictional}}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"justify-content-center\" style=\"display: flex\">\r\n              <button mdbBtn mdbWavesEffect style=\"background: brown; color: white\"\r\n                      rounded=\"true\" type=\"submit\">Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- End modal -->\r\n\r\n\r\n<!--Content-->\r\n\r\n<div class=\"row my-5\">\r\n  <div *ngFor=\"let book of books\" class=\"col-md-3 col-md-6\">\r\n    <div class=\"card mb-4\">\r\n      <div class=\"view\">\r\n        <img alt=\"Card image cap\" class=\"card-img-top\" [src]=\"book.bookImageUrl.imageUrl\">\r\n      </div>\r\n      <!-- card Body -->\r\n      <div class=\"card-body p-3\">\r\n        <h5 class=\"card-title font-weight-bold fuchsia-rose-text mb-0\"\r\n            style=\"font-size: 15px\">{{book.author.firstName}} {{book.author.lastName}}</h5>\r\n        <h5 class=\"card-title font-weight-bold fuchsia-rose-text mb-0\" style=\"font-size: 15px\">{{book.title}}</h5>\r\n        <p *ngIf=\"book.fictional != null\" class=\"aqua-sky-text mb-0\">{{book.bookCategory.nameOfBookCategory}} : {{book.fictional.nameOfFictional}}</p>\r\n        <p *ngIf=\"book.nonfictional != null\" class=\"aqua-sky-text mb-0\">{{book.bookCategory.nameOfBookCategory}} : {{book.nonfictional.nameOfNonfictional}}</p>\r\n        <p class=\"font-weight-bold mb-0\" style=\"font-size: 20px\"><img class=\"card-img-top\" src=\"./assets/images/in-stock.png\" alt=\"Card image cap\" style=\"width: 35px; height: 30px\">{{book.stock}}</p>\r\n      </div>\r\n      <!-- End Body-->\r\n\r\n      <!-- Card footer -->\r\n      <div class=\"rounded-bottom mdb-color lighten-3 text-center pt-3\">\r\n        <ul class=\"list-unstyled list-inline font-small\">\r\n          <li class=\"list-inline-item pr-2 white-text\"><i class=\"far fa-clock pr-1\"></i>05/10/2015</li>\r\n          <li class=\"list-inline-item pr-2\"><a href=\"#\" class=\"white-text\"><i\r\n            class=\"far fa-comments pr-1\"></i>12</a></li>\r\n\r\n        <button (click)=\"editFormBook(book,editBookFrame)\"\r\n                class=\"button-newCard\" style=\"color: #ffbb33;\"><i\r\n          class=\"fas fa-user-edit\"></i></button>\r\n        <button (click)=\"deleteBook(book)\" class=\"button-newCard\"\r\n                style=\"color: #ff4444;\"><i class=\"far fa-trash-alt\"></i></button>\r\n        </ul>\r\n      </div>\r\n      <!-- End footer -->\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!--End Content-->\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserService} from '../_services/user.service';\r\nimport {MDBModalRef, MDBModalService} from 'ng-uikit-pro-standard';\r\nimport {LoginComponent} from '../login/login.component';\r\nimport {RegisterComponent} from '../register/register.component';\r\nimport {TokenStorageService} from '../_services/token-storage.service';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n    modalRef: MDBModalRef;\r\n    modalRefRegister: MDBModalRef;\r\n\r\n    constructor(private userService: UserService,\r\n                private tokenStorage: TokenStorageService,\r\n                private modalService: MDBModalService,\r\n                private router: Router) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.tokenStorage.getToken() != null) {\r\n            this.router.navigateByUrl('/dashboard');\r\n        }\r\n    }\r\n\r\n    openModalLogin() {\r\n        this.modalRef = this.modalService.show(LoginComponent);\r\n    }\r\n\r\n    openModalRegister() {\r\n        this.modalRefRegister = this.modalService.show(RegisterComponent);\r\n\r\n    }\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-4\">\r\n            <div class=\"row\">\r\n\r\n                <mdb-card class=\"testimonial-card text-center\">\r\n                    <mdb-card-header>\r\n                        <p>Manage your library with our application</p>\r\n                    </mdb-card-header>\r\n                    <!--Bacground color-->\r\n                    <div class=\"card-up white lighten-1\">\r\n                    </div>\r\n\r\n                    <!--Avatar-->\r\n                    <div class=\"avatar mx-auto\">\r\n                        <img class=\"rounded-circle\" src=\"/assets/images/login.png\">\r\n                    </div>\r\n\r\n                    <mdb-card-body>\r\n                        <p>\r\n                            <button (click)=\"openModalLogin()\" block=\"true\" gradient=\"blue\" mdbBtn rounded=\"true\" type=\"button\">Login</button>\r\n                        </p>\r\n                    </mdb-card-body>\r\n                </mdb-card>\r\n\r\n                <mdb-card class=\"testimonial-card text-center\">\r\n                    <!--Bacground color-->\r\n                    <div class=\"card-up white lighten-1\">\r\n                    </div>\r\n\r\n                    <!--Avatar-->\r\n                    <div class=\"avatar mx-auto\">\r\n                        <img class=\"rounded-circle\" src=\"/assets/images/register.png\">\r\n                    </div>\r\n\r\n                    <mdb-card-body>\r\n                        <p>\r\n                            <button (click)=\"openModalRegister()\" block=\"true\" gradient=\"blue\" mdbBtn mdbWavesEffect rounded=\"true\" type=\"button\">\r\n                                Register\r\n                            </button>\r\n                        </p>\r\n                    </mdb-card-body>\r\n\r\n                    <mdb-card-footer>\r\n                        © 2020 Copyright: Chiriac Gabriel & Chiriac Ionut\r\n                    </mdb-card-footer>\r\n\r\n                </mdb-card>\r\n\r\n            </div>\r\n        </div>\r\n        <div class=\"col-md-8 view\">\r\n            <img alt=\"Responsive image\" class=\"img-fluid\" src=\"/assets/images/LMS-background.png\">\r\n            <div class=\"mask flex-center rgba-blue-slight\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AuthorService} from '../../../_services/author.service';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {Author} from '../../../model/Author';\r\nimport {AuthorImageUrl} from '../../../model/AuthorImageUrl';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-author-details',\r\n  templateUrl: './author-details.component.html',\r\n  styleUrls: ['./author-details.component.scss']\r\n})\r\nexport class AuthorDetailsComponent implements OnInit {\r\n\r\n  author: Author;\r\n\r\n  constructor(private authorService: AuthorService,\r\n              private activatedRoute: ActivatedRoute,\r\n              private sanitizer: DomSanitizer) {\r\n    this.author = new Author();\r\n    this.author.authorImageUrl = new AuthorImageUrl();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const id = this.activatedRoute.snapshot.paramMap.get('id');\r\n    this.authorService.getAuthorById(Number(id)).subscribe(author => {\r\n      this.author = author;\r\n      this.author.authorImageUrl.imageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${this.author.authorImageUrl.imageUrl}`);\r\n      this.author.bookSet.forEach((image: any) => {\r\n        image.bookImageUrl.imageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${image.bookImageUrl.imageUrl}`);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","<!-- Navbar Authors-->\r\n<mdb-navbar\r\n  SideClass=\"navbar fixed-top-author navbar-toggleable-md navbar-expand-lg scrolling-navbar double-nav grey lighten-5 navbar-dark\"\r\n  [containerInside]=\"false\">\r\n  <navlinks class=\"navbar-container\">\r\n    <mdb-icon class=\"fas-author\" fas icon=\"address-book\"></mdb-icon>\r\n  </navlinks>\r\n  <navlinks class=\"navbar-container\">\r\n    <span class=\"clearfix d-none d-sm-inline-block span-author\">Authors</span>\r\n  </navlinks>\r\n  <navlinks>\r\n    <ul class=\"nav navbar-nav nav-flex-icons ml-auto ie-double-nav\">\r\n      <li class=\"nav-item\">\r\n        <a mdbBtn type=\"button\" floating=\"true\" size=\"sm\" color=\"default\"\r\n           class=\"waves-light\" mdbWavesEffect\r\n           [routerLink]=\"['/dashboard/author']\">\r\n          <mdb-icon fas icon=\"arrow-left\"></mdb-icon>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </navlinks>\r\n\r\n\r\n</mdb-navbar>\r\n\r\n<!-- End navbar -->\r\n\r\n<!--Content Author Info-->\r\n<section class=\"magazine-section my-5\">\r\n\r\n  <!-- Section heading -->\r\n  <h2 class=\"h1-responsive font-weight-bold text-center\">{{author.firstName}} {{author.lastName}}</h2>\r\n  <!-- Section description -->\r\n  <h4 class=\"text-center dark-grey-text w-responsive mx-auto\">{{author.dateOfBirth}}</h4>\r\n\r\n  <!-- Grid row -->\r\n  <div class=\"row\">\r\n\r\n    <!-- Grid column -->\r\n    <div class=\"col-lg-6 col-md-12\">\r\n\r\n      <!-- Featured news -->\r\n      <div class=\"single-news mb-lg-0 mb-4\">\r\n\r\n        <!-- Image -->\r\n        <div class=\"view overlay rounded z-depth-1-half mb-4\">\r\n          <img class=\"img-fluid\" [src]=\"author.authorImageUrl.imageUrl\">\r\n          <a>\r\n            <div class=\"mask rgba-white-slight waves-light\" mdbWavesEffect></div>\r\n          </a>\r\n        </div>\r\n\r\n        <!-- Data -->\r\n        <div class=\"news-data d-flex justify-content-between\">\r\n\r\n            <h5 class=\"font-weight-bold\">\r\n              <mdb-icon fas icon=\"user-edit\" class=\"pr-2\"></mdb-icon>{{author.type}}</h5>\r\n\r\n          <p class=\"font-weight-bold dark-grey-text\">\r\n            <mdb-icon far icon=\"flag\" class=\"pr-2\"></mdb-icon>{{author.nationality}}</p>\r\n        </div>\r\n\r\n        <!-- Excerpt -->\r\n        <p class=\"dark-grey-text mb-lg-0 mb-md-5 mb-4\"\r\n           style=\"text-align: justify; text-justify: inter-word\">{{author.description}}</p>\r\n\r\n      </div>\r\n      <!-- Featured news -->\r\n\r\n    </div>\r\n    <!-- Grid column -->\r\n\r\n    <!-- Grid column -->\r\n    <div class=\"col-lg-6\">\r\n      <div class=\"single-news mb-4\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-5\" *ngFor=\"let book of author.bookSet\">\r\n\r\n            <!--Book ImageUrl-->\r\n            <div class=\"view overlay rounded z-depth-1 mb-4\" style=\"width: 250px; height: 350px\">\r\n              <img class=\"img-fluid\" [src]=\"book.bookImageUrl.imageUrl\" alt=\"Sample image\">\r\n              <a>\r\n                <div class=\"mask rgba-white-slight waves-light\" mdbWavesEffect></div>\r\n              </a>\r\n            </div>\r\n            <!--END Book ImageUrl-->\r\n\r\n            <p class=\"font-weight-bold dark-grey-text\">{{book.title}}</p>\r\n            <p class=\"dark-grey-text\">Stock: {{book.stock}}</p>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Grid Column -->\r\n  </div>\r\n</section>\r\n<!--END Content Author Info-->\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Role} from '../model/Role';\r\n\r\nconst API_URL = 'http://localhost:8080/api/users/roles';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getRole(): Observable<Role>{\r\n    return this.http.get<Role>(API_URL);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nconst TOKEN_KEY = 'auth-token';\r\nconst USER_KEY = 'auth-user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenStorageService {\r\n\r\n  constructor() { }\r\n\r\n  signOut(): void {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  public saveToken(token: string): void {\r\n    window.sessionStorage.removeItem(TOKEN_KEY);\r\n    window.sessionStorage.setItem(TOKEN_KEY, token);\r\n  }\r\n\r\n  public getToken(): string {\r\n    return sessionStorage.getItem(TOKEN_KEY);\r\n  }\r\n\r\n  public saveUser(user): void {\r\n    window.sessionStorage.removeItem(USER_KEY);\r\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  }\r\n\r\n  public getUser(): any {\r\n    return JSON.parse(sessionStorage.getItem(USER_KEY));\r\n  }\r\n}\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {AuthorImageUrlService} from '../../_services/author-image-url.service';\r\nimport {ModalDirective} from 'ng-uikit-pro-standard';\r\nimport {FormControl, FormGroup} from '@angular/forms';\r\nimport {AuthorImageUrl} from '../../model/AuthorImageUrl';\r\nimport {BookImageUrlService} from '../../_services/book-image-url.service';\r\nimport {BookImageUrl} from '../../model/BookImageUrl';\r\nimport {AlertsService} from '../../_services/alerts.service';\r\nimport {ReloadPageService} from '../../_services/reload-page.service';\r\nimport swal from 'sweetalert';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport {NavigationEnd, Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-media',\r\n  templateUrl: './media.component.html',\r\n  styleUrls: ['./media.component.scss']\r\n})\r\nexport class MediaComponent implements OnInit, OnDestroy {\r\n\r\n  authorImages = [];\r\n  authorImageForm: FormGroup;\r\n  errorMessageAuthor = '';\r\n  isAuthorTitlePresent = false;\r\n\r\n  bookImages = [];\r\n  bookImageForm: FormGroup;\r\n  errorMessageBook = '';\r\n  isBookTitlePresent = false;\r\n\r\n  selectedFiles: FileList;\r\n  currentFile: File;\r\n\r\n  bookImageSubscription: any;\r\n  authorImageSubscription: any;\r\n  navigationSubscription: any;\r\n\r\n  constructor(private authorImageUrlService: AuthorImageUrlService,\r\n              private bookImageUrlService: BookImageUrlService,\r\n              private alertsService: AlertsService,\r\n              private reloadPageService: ReloadPageService,\r\n              private sanitizer: DomSanitizer,\r\n              private router: Router) {\r\n    this.navigationSubscription = this.router.events.subscribe((e: any) => {\r\n      if (e instanceof NavigationEnd) {\r\n        this.getAllBookImages();\r\n        this.getAllAuthorImages();\r\n      }\r\n    });\r\n  }\r\n\r\n  get authorTitle() {\r\n    return this.authorImageForm.get('title');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.authorForm();\r\n    this.bookForm();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.bookImageSubscription) {\r\n      this.bookImageSubscription.unsubscribe();\r\n    }\r\n    if (this.authorImageSubscription) {\r\n      this.authorImageSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  authorForm() {\r\n    this.authorImageForm = new FormGroup({\r\n      title: new FormControl(''),\r\n      // imageUrl: new FormControl('')\r\n    });\r\n  }\r\n\r\n  getAllAuthorImages() {\r\n    this.authorImageUrlService.getAllImages().subscribe((data: any) => {\r\n        this.authorImages = data;\r\n\r\n        this.authorImages.forEach((imageAuthor: any) => {\r\n          imageAuthor.imageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${imageAuthor.imageUrl}`);\r\n        });\r\n\r\n      },\r\n      error => {\r\n        this.authorImages = JSON.parse(error.message).message;\r\n      }\r\n    );\r\n  }\r\n\r\n  addAuthorImage(modalDirective: ModalDirective) {\r\n    this.currentFile = this.selectedFiles.item(0);\r\n\r\n    this.authorImageSubscription = this.authorImageUrlService.createImageUrl(this.authorImageForm.value.title, this.currentFile).subscribe(response => {\r\n        modalDirective.toggle();\r\n        this.reloadPageService.reload();\r\n        this.alertsService.success();\r\n        this.isAuthorTitlePresent = false;\r\n      },\r\n      err => {\r\n        this.errorMessageAuthor = err.error.message;\r\n        this.isAuthorTitlePresent = true;\r\n      });\r\n  }\r\n\r\n  deleteAuthorImageById(authorImageUrl: AuthorImageUrl) {\r\n\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'Once deleted, you will not be able to recover this registration!',\r\n      icon: 'warning',\r\n      buttons: ['Cancel', 'Ok'],\r\n      dangerMode: true,\r\n    })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          this.authorImageUrlService.deleteImageById(authorImageUrl.id).subscribe(response => {\r\n              this.alertsService.warning();\r\n              this.reloadPageService.reload();\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            }\r\n          );\r\n          swal('Your registration/file has been deleted!', {\r\n            icon: 'success',\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  bookForm() {\r\n    this.bookImageForm = new FormGroup({\r\n      title: new FormControl(''),\r\n      // imageUrl: new FormControl('')\r\n    });\r\n  }\r\n\r\n  getAllBookImages() {\r\n\r\n    this.bookImageUrlService.getAllImageBook().subscribe((data: any) => {\r\n        this.bookImages = data;\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n          this.bookImages[i].imageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${data[i].imageUrl}`);\r\n        }\r\n      },\r\n      err =>\r\n        this.bookImages = JSON.parse(err.message).message\r\n    );\r\n  }\r\n\r\n  uploadImage(event) {\r\n    this.selectedFiles = event.target.files;\r\n  }\r\n\r\n\r\n  addBookImage(modalDirective: ModalDirective) {\r\n    this.currentFile = this.selectedFiles.item(0);\r\n\r\n    this.bookImageSubscription = this.bookImageUrlService.addBookImageUrl(this.bookImageForm.value.title, this.currentFile).subscribe(response => {\r\n        modalDirective.toggle();\r\n        this.reloadPageService.reload();\r\n        this.alertsService.success();\r\n        this.isBookTitlePresent = false;\r\n      },\r\n      err => {\r\n        this.errorMessageBook = err.error.message;\r\n        this.isBookTitlePresent = true;\r\n      });\r\n  }\r\n\r\n  deleteBookImageById(bookImageUrl: BookImageUrl) {\r\n\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'Once deleted, you will not be able to recover this registration!',\r\n      icon: 'warning',\r\n      buttons: ['Cancel', 'Ok'],\r\n      dangerMode: true,\r\n    })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          this.bookImageUrlService.deleteBookImageById(bookImageUrl.id).subscribe(response => {\r\n            this.alertsService.warning();\r\n            this.reloadPageService.reload();\r\n          }, error => {\r\n            console.log(error);\r\n          });\r\n          swal('Your registration/file has been deleted!', {\r\n            icon: 'success',\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n\r\n}\r\n","<form class=\"form-inline d-flex justify-content-center md-form form-sm\">\r\n  <button (click)=\"frameAuthor.toggle()\" color=\"default\" mdbBtn mdbWavesEffect rounded=\"true\"\r\n          style=\"margin-bottom: 10px\" type=\"button\">Add Author Image\r\n  </button>\r\n  <button (click)=\"frameBook.toggle()\" color=\"default\" mdbBtn mdbWavesEffect rounded=\"true\"\r\n          type=\"button\">Book\r\n    Image\r\n  </button>\r\n  <input aria-label=\"Search\" class=\"form-control form-control-sm mr-3 w-75\" placeholder=\"Search Image\"\r\n         type=\"text\">\r\n  <i aria-hidden=\"true\" class=\"fas fa-search\"></i>\r\n</form>\r\n\r\n<!--MODALS FOR Media Author-->\r\n\r\n<div #frameAuthor=\"mdbModal\" aria-hidden=\"true\" aria-labelledby=\"myModalLabel\"\r\n     class=\"modal fade top\" id=\"frameModalAuthor\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog cascading-modal modal-avatar modal-sm\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Body-->\r\n      <ng-container *ngIf=\"authorImageForm\">\r\n        <form #titleAuthor=\"ngForm\"\r\n              (ngSubmit)=\"titleAuthor.form.valid && addAuthorImage(frameAuthor)\"\r\n              [formGroup]=\"authorImageForm\">\r\n          <div class=\"modal-body mb-1\">\r\n\r\n            <div class=\"md-form ml-0 mr-0\">\r\n              <input class=\"form-control form-control-sm ml-0\" formControlName=\"title\"\r\n                     id=\"titleAuthor\"\r\n                     mdbInput mdbValidate type=\"text\">\r\n              <label class=\"ml-0\" for=\"titleAuthor\">Image title</label>\r\n              <mdb-error *ngIf=\"titleAuthor.invalid && (titleAuthor.dirty || titleAuthor.touched)\">\r\n                Title is already taken\r\n              </mdb-error>\r\n\r\n            </div>\r\n\r\n            <div class=\"md-form ml-0 mr-0\">\r\n              <input type=\"file\"\r\n                     accept=\"image/*\" (change)=\"uploadImage($event)\"\r\n                     mdbInput mdbValidate>\r\n\r\n            </div>\r\n\r\n            <div *ngIf=\"titleAuthor.submitted && isAuthorTitlePresent\" class=\"alert alert-warning\">\r\n              {{errorMessageAuthor}}\r\n            </div>\r\n\r\n            <div class=\"text-center mt-4\">\r\n              <button class=\"my-0\" color=\"default\" mdbBtn\r\n                      rounded=\"true\" size=\"sm\"\r\n                      type=\"submit\">Confirm\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </ng-container>\r\n    </div>\r\n    <!--/.Content-->\r\n  </div>\r\n</div>\r\n<!--END MODAL-->\r\n\r\n<!--MODALS FOR Book Media-->\r\n<div #frameBook=\"mdbModal\" aria-hidden=\"true\" aria-labelledby=\"myModalLabel\" class=\"modal fade top\"\r\n     id=\"frameModalBook\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog cascading-modal modal-avatar modal-sm\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Body-->\r\n      <ng-container *ngIf=\"bookImageForm\">\r\n        <form #titleBook=\"ngForm\"\r\n              (ngSubmit)=\"titleBook.form.valid && addBookImage(frameBook)\"\r\n              [formGroup]=\"bookImageForm\">\r\n          <div class=\"modal-body mb-1\">\r\n\r\n            <div class=\"md-form ml-0 mr-0\">\r\n              <input class=\"form-control form-control-sm ml-0\" formControlName=\"title\"\r\n                     id=\"titleBook\" mdbInput mdbValidate type=\"text\">\r\n              <label class=\"ml-0\" for=\"titleBook\">Image title</label>\r\n              <mdb-error *ngIf=\"titleBook.invalid && (titleBook.dirty || titleBook.touched)\">\r\n                Title is already taken\r\n              </mdb-error>\r\n            </div>\r\n\r\n            <div class=\"md-form ml-0 mr-0\">\r\n              <input type=\"file\"\r\n                     accept=\"image/*\" (change)=\"uploadImage($event)\"\r\n                     mdbInput mdbValidate>\r\n\r\n            </div>\r\n\r\n            <div *ngIf=\"titleBook.submitted && isBookTitlePresent\" class=\"alert alert-warning\">\r\n              {{errorMessageBook}}\r\n            </div>\r\n\r\n            <div class=\"text-center mt-4\">\r\n              <button class=\"my-0\" color=\"default\" mdbBtn\r\n                      rounded=\"true\" size=\"sm\"\r\n                      type=\"submit\">Confirm\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </ng-container>\r\n    </div>\r\n    <!--/.Content-->\r\n  </div>\r\n</div>\r\n<!--END MODAL-->\r\n\r\n<div class=row>\r\n  <div class=\"col\">\r\n\r\n    <!--Content Author-->\r\n    <h3 class=\"card-header info-color white-text text-uppercase text-center\">Media Authors</h3>\r\n    <div class=\"row\">\r\n      <div *ngFor=\"let author of authorImages\" class=\"col-md-4 mx-auto my-2\">\r\n\r\n        <!--Card-->\r\n        <mdb-card class=\"text-center height-card\">\r\n          <button (click)=\"deleteAuthorImageById(author)\" class=\"float-right\" size=\"sm\">\r\n            <i class=\"far fa-trash-alt text-danger\"></i>\r\n          </button>\r\n          <!--Card image-->\r\n          <div class=\"view view-cascade overlay waves-light\" mdbWavesEffect>\r\n            <mdb-card-img [src]=\"author.imageUrl\"></mdb-card-img>\r\n            <a>\r\n              <div class=\"mask rgba-white-slight\"></div>\r\n            </a>\r\n          </div>\r\n          <!--/Card image-->\r\n          <mdb-card-body>\r\n            <h4 class=\"card-title\">\r\n              <strong>{{author.title}}</strong>\r\n            </h4>\r\n          </mdb-card-body>\r\n\r\n        </mdb-card>\r\n        <!--/.Card-->\r\n      </div>\r\n    </div>\r\n    <!-- END -->\r\n\r\n  </div>\r\n  <div class=\"col\">\r\n\r\n    <!--Content Book-->\r\n    <h3 class=\"card-header info-color white-text text-uppercase text-center\">Media Books</h3>\r\n    <div class=\"row\">\r\n      <div *ngFor=\"let book of bookImages\" class=\"col-md-4 mx-auto my-2\">\r\n\r\n        <!--Card-->\r\n        <mdb-card class=\"text-center height-card\">\r\n          <button (click)=\"deleteBookImageById(book)\" class=\"float-right\" size=\"sm\">\r\n            <i class=\"far fa-trash-alt text-danger\"></i>\r\n          </button>\r\n          <!--Card image-->\r\n          <div class=\"view view-cascade overlay waves-light\" mdbWavesEffect>\r\n            <mdb-card-img [src]=\"book.imageUrl\"></mdb-card-img>\r\n            <a>\r\n              <div class=\"mask rgba-white-slight\"></div>\r\n            </a>\r\n          </div>\r\n          <!--/Card image-->\r\n          <mdb-card-body>\r\n            <h4 class=\"card-title\">\r\n              <strong>{{book.title}}</strong>\r\n            </h4>\r\n          </mdb-card-body>\r\n\r\n        </mdb-card>\r\n        <!--/.Card-->\r\n      </div>\r\n    </div>\r\n    <!-- END -->\r\n\r\n  </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {TokenStorageService} from '../_services/token-storage.service';\r\nimport {Router} from '@angular/router';\r\nimport {ProfileService} from '../_services/profile.service';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  email: string;\r\n  id: number;\r\n  currentUser: any;\r\n  profileImageAvatar: any;\r\n  private roles: string[];\r\n\r\n  constructor(private tokenStorageService: TokenStorageService,\r\n              private profileService: ProfileService,\r\n              private sanitizer: DomSanitizer,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n\r\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\r\n      this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\r\n\r\n      this.email = user.email;\r\n      this.id = user.id;\r\n    }\r\n\r\n    if (this.tokenStorageService.getToken() == null) {\r\n      this.router.navigateByUrl('/home');\r\n    }\r\n    this.getImageProfileAvatar();\r\n  }\r\n\r\n  logout(): void {\r\n    this.tokenStorageService.signOut();\r\n    this.router.navigateByUrl('/home');\r\n  }\r\n\r\n  sendToProfile(id: number) {\r\n    this.router.navigateByUrl('dashboard/profile/' + id);\r\n  }\r\n\r\n  getImageProfileAvatar() {\r\n    this.profileService.getProfileImageByUserId(this.tokenStorageService.getUser().id).subscribe((data: any) => {\r\n      this.profileImageAvatar = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${data.image}`);\r\n    }, error => {\r\n      this.profileImageAvatar = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n}\r\n","<!--Double navigation-->\r\n<header>\r\n  <!-- Sidebar navigation -->\r\n  <mdb-side-nav #sidenav [fixed]=\"true\" class=\"fixed stylish-color\">\r\n\r\n    <mdb-navbar-brand class=\"img-center\">\r\n      <!-- Logo -->\r\n\r\n      <img src=\"/assets/images/logo.png\" style=\"max-height: 120px; max-width: 120px;\">\r\n      <!--/. Logo -->\r\n    </mdb-navbar-brand>\r\n\r\n    <links>\r\n      <!-- Side navigation links -->\r\n      <li>\r\n        <ul class=\"collapsible collapsible-accordion\">\r\n          <mdb-accordion [multiple]=\"false\" aria-multiselectable=\"false\">\r\n\r\n            <mdb-accordion-item class=\"no-collase\">\r\n              <mdb-accordion-item-head mdbWavesEffect [routerLink]=\"['/dashboard']\">\r\n                <mdb-icon fas icon=\"home\"></mdb-icon>\r\n                Home\r\n              </mdb-accordion-item-head>\r\n              <mdb-accordion-item-body></mdb-accordion-item-body>\r\n            </mdb-accordion-item>\r\n\r\n            <mdb-accordion-item class=\"no-collase\">\r\n              <mdb-accordion-item-head mdbWavesEffect routerLink=\"reservation\">\r\n                <mdb-icon fas icon=\"calendar-check\"></mdb-icon>\r\n                Reservations\r\n              </mdb-accordion-item-head>\r\n              <mdb-accordion-item-body></mdb-accordion-item-body>\r\n            </mdb-accordion-item>\r\n\r\n            <mdb-accordion-item class=\"no-collase\">\r\n              <mdb-accordion-item-head mdbWavesEffect routerLink=\"author\">\r\n                <mdb-icon fas icon=\"address-book\"></mdb-icon>\r\n                Authors\r\n              </mdb-accordion-item-head>\r\n              <mdb-accordion-item-body></mdb-accordion-item-body>\r\n            </mdb-accordion-item>\r\n\r\n            <mdb-accordion-item class=\"no-collase\">\r\n              <mdb-accordion-item-head mdbWavesEffect routerLink=\"book\">\r\n                <mdb-icon fas icon=\"book\"></mdb-icon>\r\n                Books\r\n              </mdb-accordion-item-head>\r\n              <mdb-accordion-item-body></mdb-accordion-item-body>\r\n            </mdb-accordion-item>\r\n\r\n            <mdb-accordion-item class=\"no-collase\">\r\n              <mdb-accordion-item-head mdbWavesEffect routerLink=\"client\">\r\n                <mdb-icon fas icon=\"user-friends\"></mdb-icon>\r\n                Clients\r\n              </mdb-accordion-item-head>\r\n              <mdb-accordion-item-body></mdb-accordion-item-body>\r\n            </mdb-accordion-item>\r\n\r\n            <mdb-accordion-item *ngIf=\"showAdminBoard\">\r\n              <mdb-accordion-item-head mdbWavesEffect>\r\n                <mdb-icon fas icon=\"cogs\"></mdb-icon>\r\n                Admin panel\r\n              </mdb-accordion-item-head>\r\n              <mdb-accordion-item-body>\r\n                <ul>\r\n                  <li>\r\n                    <a routerLink=\"user\" mdbWavesEffect class=\"menu-item\">Users</a>\r\n                  </li>\r\n                  <li>\r\n                    <a routerLink=\"media\" mdbWavesEffect class=\"menu-item\">Media</a>\r\n                  </li>\r\n                </ul>\r\n              </mdb-accordion-item-body>\r\n            </mdb-accordion-item>\r\n\r\n          </mdb-accordion>\r\n        </ul>\r\n      </li>\r\n      <!--/. Side navigation links -->\r\n    </links>\r\n\r\n  </mdb-side-nav>\r\n  <!--/. Sidebar navigation -->\r\n\r\n  <!-- Navbar -->\r\n  <mdb-navbar\r\n    SideClass=\"navbar fixed-top navbar-toggleable-md navbar-expand-lg scrolling-navbar double-nav stylish-color text-white\"\r\n    [containerInside]=\"false\">\r\n\r\n    <navlinks class=\"navbar-container\">\r\n      <!-- SideNav slide-out button -->\r\n      <div class=\"float-left\">\r\n        <a (click)=\"sidenav.show()\" class=\"button-collapse\">\r\n          <mdb-icon fas icon=\"bars\"></mdb-icon>\r\n        </a>\r\n      </div>\r\n      <!--/. SideNav slide-out button -->\r\n    </navlinks>\r\n\r\n    <navlinks>\r\n      <ul class=\"nav navbar-nav nav-flex-icons ml-auto ie-double-nav\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link waves-light\" mdbWavesEffect>\r\n            <mdb-icon fas icon=\"envelope\"></mdb-icon>\r\n            <span class=\"clearfix d-none d-sm-inline-block\">Support</span></a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link waves-light\" (click)=\"logout()\" mdbWavesEffect>\r\n            <mdb-icon fas icon=\"sign-out-alt\"></mdb-icon>\r\n            <span class=\"clearfix d-none d-sm-inline-block\">Logout</span></a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link waves-light\" routerLink=\"profile\" mdbWavesEffect\r\n          (click)=\"sendToProfile(id)\">\r\n\r\n            <img class=\"avatar\" [src]=\"profileImageAvatar\">\r\n\r\n            <span class=\"clearfix d-none d-sm-inline-block\">{{email}}</span></a>\r\n        </li>\r\n      </ul>\r\n    </navlinks>\r\n  </mdb-navbar>\r\n  <!--/. Navbar -->\r\n\r\n</header>\r\n<!--/.Double navigation-->\r\n\r\n<!--Main Layout-->\r\n<main>\r\n  <router-outlet></router-outlet>\r\n</main>\r\n<!--/Main layout-->\r\n","import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n    title = 'Library App';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {StatsService} from '../../_services/stats.service';\r\n\r\n@Component({\r\n  selector: 'app-stats-card',\r\n  templateUrl: './stats-card.component.html',\r\n  styleUrls: ['./stats-card.component.scss']\r\n})\r\nexport class StatsCardComponent implements OnInit {\r\n\r\n  countAuthors: number;\r\n  countUsers: number;\r\n  countBooks: number;\r\n  countReservations: number;\r\n\r\n  constructor(private statsService: StatsService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getCountOfAuthors();\r\n    this.getCountOfUsers();\r\n    this.getCountOfBooks();\r\n    this.getCountOfReservations();\r\n\r\n  }\r\n\r\n  getCountOfAuthors() {\r\n    this.statsService.getAuthorsCount().subscribe((data: any) => {\r\n      this.countAuthors = data;\r\n    }, error => {\r\n      this.countAuthors = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getCountOfUsers() {\r\n    this.statsService.getUsersCount().subscribe((data: any) => {\r\n      this.countUsers = data;\r\n    }, error => {\r\n      this.countUsers = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getCountOfBooks() {\r\n    this.statsService.getBooksCount().subscribe((data: any) => {\r\n      this.countBooks = data;\r\n    }, error => {\r\n      this.countBooks = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getCountOfReservations() {\r\n    this.statsService.getReservationsCount().subscribe((data: any) => {\r\n      this.countReservations = data;\r\n    }, error => {\r\n      this.countReservations = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","\r\n\r\n<section class=\"mt-lg-5\">\r\n\r\n  <!--Grid row-->\r\n  <div class=\"row\">\r\n\r\n    <!--Grid column-->\r\n    <div class=\"col-xl-3 col-md-6 mb-r\">\r\n\r\n      <!--Card-->\r\n      <mdb-card cascade=\"true\" class=\"cascading-admin-card\">\r\n\r\n        <!--Card Data-->\r\n        <div class=\"admin-up\">\r\n          <mdb-icon far icon=\"address-book\" class=\"primary-color\"></mdb-icon>\r\n          <div class=\"data\">\r\n            <p style=\"font-size: 20px\">AUTHORS</p>\r\n            <h4><strong>{{countAuthors}}</strong></h4>\r\n          </div>\r\n        </div>\r\n        <!--/.Card Data-->\r\n\r\n        <!--Card content-->\r\n        <mdb-card-body>\r\n\r\n        </mdb-card-body>\r\n        <!--/.Card content-->\r\n\r\n      </mdb-card>\r\n      <!--/.Card-->\r\n\r\n    </div>\r\n    <!--Grid column-->\r\n\r\n    <!--Grid column-->\r\n    <div class=\"col-xl-3 col-md-6 mb-r\">\r\n\r\n      <!--Card-->\r\n      <mdb-card cascade=\"true\" class=\"cascading-admin-card\">\r\n\r\n        <!--Card Data-->\r\n        <div class=\"admin-up\">\r\n          <mdb-icon fas icon=\"users\" class=\"warning-color\"></mdb-icon>\r\n          <div class=\"data\">\r\n            <p style=\"font-size: 20px\">USERS</p>\r\n            <h4><strong>{{countUsers}}</strong></h4>\r\n          </div>\r\n        </div>\r\n        <!--/.Card Data-->\r\n\r\n        <!--Card content-->\r\n        <mdb-card-body>\r\n\r\n        </mdb-card-body>\r\n        <!--/.Card content-->\r\n\r\n      </mdb-card>\r\n      <!--/.Card-->\r\n\r\n    </div>\r\n    <!--Grid column-->\r\n\r\n    <!--Grid column-->\r\n    <div class=\"col-xl-3 col-md-6 mb-r\">\r\n\r\n      <!--Card-->\r\n      <mdb-card cascade=\"true\" class=\"cascading-admin-card\">\r\n\r\n        <!--Card Data-->\r\n        <div class=\"admin-up\">\r\n          <mdb-icon fas icon=\"book-open\" class=\"light-blue lighten-1\"></mdb-icon>\r\n          <div class=\"data\">\r\n            <p style=\"font-size: 20px\">BOOKS</p>\r\n            <h4><strong>{{countBooks}}</strong></h4>\r\n          </div>\r\n        </div>\r\n        <!--/.Card Data-->\r\n\r\n        <!--Card content-->\r\n        <mdb-card-body>\r\n\r\n        </mdb-card-body>\r\n        <!--/.Card content-->\r\n\r\n      </mdb-card>\r\n      <!--/.Card-->\r\n\r\n    </div>\r\n    <!--Grid column-->\r\n\r\n    <!--Grid column-->\r\n    <div class=\"col-xl-3 col-md-6 mb-r\">\r\n\r\n      <!--Card-->\r\n      <mdb-card cascade=\"true\" class=\"cascading-admin-card\">\r\n\r\n        <!--Card Data-->\r\n        <div class=\"admin-up\">\r\n          <mdb-icon fas icon=\"calendar-check\" class=\"red accent-2\"></mdb-icon>\r\n          <div class=\"data\">\r\n            <p style=\"font-size: 20px\">RESERVATIONS</p>\r\n            <h4><strong>{{countReservations}}</strong></h4>\r\n          </div>\r\n        </div>\r\n        <!--/.Card Data-->\r\n\r\n        <!--Card content-->\r\n        <mdb-card-body>\r\n\r\n        </mdb-card-body>\r\n        <!--/.Card content-->\r\n\r\n      </mdb-card>\r\n      <!--/.Card-->\r\n\r\n    </div>\r\n    <!--Grid column-->\r\n\r\n  </div>\r\n  <!--Grid row-->\r\n\r\n</section>\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {User} from '../model/User';\r\n\r\nconst API_URL = 'http://localhost:8080/api/users/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUsers(): Observable<any> {\r\n    return this.http.get(API_URL);\r\n  }\r\n\r\n  editUserById(id: number, user): Observable<User>{\r\n    return this.http.put<User>(API_URL + id, {\r\n      name: user.name,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n      password: user.password,\r\n      roleSet: user.roleSet\r\n    }, httpOptions);\r\n  }\r\n\r\n  getUserById(id: number){\r\n    this.http.get(API_URL + id);\r\n  }\r\n\r\n  deleteUser(id: number): Observable<any> {\r\n    return this.http.delete(API_URL + id);\r\n  }\r\n\r\n  uploadPhoto(id: number, user){\r\n    this.http.post(API_URL + id, {\r\n      profilePhoto: user.profilePhoto\r\n    }, httpOptions);\r\n  }\r\n\r\n}\r\n","import {Component, HostListener, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {MdbTableDirective} from 'ng-uikit-pro-standard';\r\nimport {ReservationService} from '../_services/reservation.service';\r\nimport {TokenStorageService} from '../_services/token-storage.service';\r\n\r\nimport {ProfileService} from '../_services/profile.service';\r\nimport {AlertsService} from '../_services/alerts.service';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport {ReloadPageService} from '../_services/reload-page.service';\r\nimport {NavigationEnd, Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild(MdbTableDirective, {static: true}) mdbTable: MdbTableDirective;\r\n  elements: any = [];\r\n  isElements = false;\r\n  headElements = ['Book', 'Client', 'StartDate', 'EndDate', 'ReservationState'];\r\n  searchText = '';\r\n  previous: string;\r\n  reservations = [];\r\n  currentUser: any;\r\n  selectedFiles: FileList;\r\n  currentFile: File;\r\n  page = 1;\r\n  count: any;\r\n  pageSize = 8;\r\n\r\n  imageUser: any;\r\n  newImageUser: any;\r\n  isNewImageUser = false;\r\n  imageId: number;\r\n\r\n  profileImageSubscription: any;\r\n  navigationSubscription: any;\r\n\r\n  message = 'Click Update to save your profile photo !';\r\n\r\n  constructor(private reservationService: ReservationService,\r\n              private token: TokenStorageService,\r\n              private profileService: ProfileService,\r\n              private alertService: AlertsService,\r\n              private sanitizer: DomSanitizer,\r\n              private reloadPageService: ReloadPageService,\r\n              private router: Router) {\r\n    // TO PREVENT MEMORY LEAK\r\n    this.navigationSubscription = this.router.events.subscribe((e: any) => {\r\n      if (e instanceof NavigationEnd) {\r\n        this.getImageProfile();\r\n      }\r\n    });\r\n  }\r\n\r\n  @HostListener('input') oninput() {\r\n    this.searchItems();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getAllReservationsByUserId();\r\n\r\n    this.mdbTable.setDataSource(this.elements);\r\n    this.previous = this.mdbTable.getDataSource();\r\n\r\n    this.currentUser = this.token.getUser();\r\n\r\n  }\r\n\r\n  // PART OF MEMORY LEAK\r\n  ngOnDestroy() {\r\n    if (this.profileImageSubscription) {\r\n      this.profileImageSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  searchItems() {\r\n    const prev = this.mdbTable.getDataSource();\r\n    if (!this.searchText) {\r\n      this.mdbTable.setDataSource(this.previous);\r\n      this.elements = this.mdbTable.getDataSource();\r\n    }\r\n    if (this.searchText) {\r\n      this.elements = this.mdbTable.searchLocalDataBy(this.searchText);\r\n      this.mdbTable.setDataSource(prev);\r\n    }\r\n  }\r\n\r\n  getAllReservationsByUserId() {\r\n    const params = this.getRequestParams(this.page, this.pageSize);\r\n    this.reservationService.getReservationsByUserId(this.token.getUser().id, params).subscribe((data: any) => {\r\n\r\n      this.reservations = data.content;\r\n\r\n      this.count = data.totalElements;\r\n\r\n      this.populateTable(data.content);\r\n\r\n    }, error => {\r\n      this.reservations = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getRequestParams(page, pageSize) {\r\n    let params = {};\r\n\r\n    if (page) {\r\n      params[`page`] = page - 1;\r\n    }\r\n    if (pageSize) {\r\n      params[`size`] = pageSize;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  handlePageChange(event) {\r\n    if (this.elements.length > 0) {\r\n      this.elements = [];\r\n    }\r\n\r\n    this.page = event;\r\n    this.getAllReservationsByUserId();\r\n  }\r\n\r\n  populateTable(data: any) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      for (let j = 0; j < data[i].bookList.length; j++) {\r\n        this.elements.push({\r\n          book: data[i].bookList[j].title,\r\n          client: data[i].client.email,\r\n          startDate: data[i].startDate,\r\n          endDate: data[i].endDate,\r\n          reservationState: data[i].reservationState.nameOfState\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  showPreviewImageProfile(event) {\r\n    this.selectedFiles = event.target.files;\r\n\r\n    // this will show the profile picture before the update button is pressed\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.newImageUser = reader.result as string;\r\n      this.isNewImageUser = true;\r\n    };\r\n    reader.readAsDataURL(this.selectedFiles.item(0));\r\n    // END\r\n  }\r\n\r\n  update() {\r\n\r\n    this.currentFile = this.selectedFiles.item(0);\r\n\r\n    // THIS WILL PRODUCE MEMORY LEAK IF IS NOT UNSUBSCRIBED AND DESTROYED\r\n    this.profileImageSubscription = this.profileService.updateProfileImage(this.currentFile, this.imageId).subscribe(event => {\r\n\r\n      this.reloadPageService.reload();\r\n      this.alertService.success();\r\n      this.isNewImageUser = false;\r\n\r\n    }, error => {\r\n      this.profileService = JSON.parse(error.message).message;\r\n    });\r\n    this.selectedFiles = undefined;\r\n  }\r\n\r\n  getImageProfile() {\r\n    this.profileService.getProfileImageByUserId(this.token.getUser().id).subscribe((data: any) => {\r\n      this.imageUser = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${data.image}`);\r\n      this.imageId = data.id;\r\n    }, error => {\r\n      this.imageUser = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-6 col-md-4\">\r\n      <!--Card-->\r\n      <mdb-card cascade=\"true\" narrower=\"true\">\r\n\r\n            <div class=\"box\">\r\n\r\n              <img [src]=\"newImageUser\" class=\"js--image-preview\" *ngIf=\"isNewImageUser\">\r\n              <img [src]=\"imageUser\" class=\"js--image-preview\" *ngIf=\"!isNewImageUser\">\r\n\r\n              <div class=\"upload-options\">\r\n                <label>\r\n                  <i class=\"fas fa-search-plus search-style\"></i>\r\n                  <input  class=\"image-upload\" type=\"file\" accept=\"image/*\" name=\"profilePhoto\"\r\n                          (change)=\"showPreviewImageProfile($event)\">\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <!--/Card image-->\r\n            <mdb-card-body cascade=\"true\" class=\"text-center\">\r\n\r\n              <span class=\"form-control text-danger\" *ngIf=\"isNewImageUser\">{{message}}</span>\r\n\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"form-group\">\r\n                    <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n                    <label class=\"col-sm-8\" for=\"firstName\">First Name</label>\r\n                    <input class=\"form-control\" id=\"firstName\" type=\"text\" disabled\r\n                    [value]=\"currentUser.name\">\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"form-group\">\r\n                    <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n                    <label class=\"col-sm-8\" for=\"lastName\">Last name</label>\r\n                    <input class=\"form-control\" id=\"lastName\" type=\"text\" disabled\r\n                    [value]=\"currentUser.lastName\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"form-group\">\r\n                    <mdb-icon class=\"prefix grey-text\" fas icon=\"envelope\"></mdb-icon>\r\n                    <label class=\"col-sm-8\" for=\"type\">Email</label>\r\n                    <input class=\"form-control\" id=\"type\" type=\"text\" disabled\r\n                    [value]=\"currentUser.email\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <button mdbBtn mdbWavesEffect style=\"background: brown; color: white\"\r\n                      rounded=\"true\" (click)=\"update()\">Update</button>\r\n\r\n            </mdb-card-body>\r\n            <!--/.Card content-->\r\n\r\n      </mdb-card>\r\n      <!--/.Card-->\r\n    </div>\r\n\r\n\r\n    <!--CARD TABLE WITH RESERVATIONS-->\r\n    <div class=\"col col-md-8\">\r\n      <mdb-card cascade=\"true\" narrower=\"true\">\r\n\r\n        <div class=\"view view-cascade gradient-card-header blue-gradient card-header-custom-height\">\r\n          <h2 class=\"card-header-title\">List of Reservations:</h2>\r\n        </div>\r\n\r\n        <mdb-card-body>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 mx-auto\">\r\n                  <div class=\"md-form\">\r\n                    <input\r\n                      type=\"text\"\r\n                      [(ngModel)]=\"searchText\"\r\n                      class=\"form-control\"\r\n                      id=\"search\"\r\n                      mdbInput\r\n                    />\r\n                    <label for=\"search\">Search</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <table mdbTable class=\"z-depth-1\">\r\n                <thead>\r\n                <tr>\r\n                  <th\r\n                    *ngFor=\"let head of headElements; let i = index\"\r\n                    scope=\"col\">\r\n                    {{head}}\r\n                  </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr *ngFor=\"let el of elements | paginate: {\r\n                itemsPerPage: pageSize,\r\n                currentPage: page,\r\n                totalItems: count}; let i = index\">\r\n                  <th scope=\"row\">{{el.book}}</th>\r\n                  <td>{{el.client}}</td>\r\n                  <td>{{el.startDate}}</td>\r\n                  <td>{{el.endDate}}</td>\r\n                  <td>{{el.reservationState}}</td>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n\r\n              <pagination-controls\r\n                previousLabel=\"Prev\"\r\n                nextLabel=\"Next\"\r\n                responsive=\"true\"\r\n                (pageChange)=\"handlePageChange($event)\"\r\n              >\r\n              </pagination-controls>\r\n            </div>\r\n          </div>\r\n\r\n        </mdb-card-body>\r\n      </mdb-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {ToastService} from 'ng-uikit-pro-standard';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertsService {\r\n\r\n  constructor(private toast: ToastService) {\r\n  }\r\n\r\n  success() {\r\n    const options = {timeOut: 1500};\r\n    this.toast.success('Action performed successfully', '', options);\r\n  }\r\n\r\n  warning() {\r\n    const options = {timeOut: 1500};\r\n    this.toast.warning('Delete was successful', '', options);\r\n  }\r\n\r\n}\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {NgModule, NO_ERRORS_SCHEMA} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {AgmCoreModule} from '@agm/core';\r\nimport {AppComponent} from './app.component';\r\n\r\nimport {\r\n  MDBBootstrapModulesPro,\r\n  MDBSpinningPreloader,\r\n  NavbarModule,\r\n  StickyHeaderModule,\r\n  ToastModule\r\n} from 'ng-uikit-pro-standard';\r\nimport {HomeComponent} from './home/home.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {ProfileComponent} from './profile/profile.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {authInterceptorProviders} from './_helpers/auth.interceptor';\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {DashboardComponent} from './dashboard/dashboard.component';\r\nimport {NotFoundComponent} from './_errors/not-found/not-found.component';\r\nimport {UserComponent} from './user/user.component';\r\nimport {AuthorComponent} from './_core/author/author.component';\r\nimport {BookComponent} from './_core/book/book.component';\r\nimport {MediaComponent} from './_core/media/media.component';\r\nimport {AuthorDetailsComponent} from './_core/author/author-details/author-details.component';\r\nimport {StatsCardComponent} from './dashboard/stats-card/stats-card.component';\r\nimport {ClientComponent} from './_core/client/client.component';\r\nimport {ReservationComponent} from './_core/reservation/reservation.component';\r\nimport {CalendarModule, DateAdapter} from 'angular-calendar';\r\nimport {adapterFactory} from 'angular-calendar/date-adapters/date-fns';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FlatpickrModule} from 'angularx-flatpickr';\r\nimport {ToastrModule} from 'ngx-toastr';\r\nimport {NgxPaginationModule} from 'ngx-pagination';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    LoginComponent,\r\n    ProfileComponent,\r\n    RegisterComponent,\r\n    DashboardComponent,\r\n    NotFoundComponent,\r\n    UserComponent,\r\n    AuthorComponent,\r\n    BookComponent,\r\n    MediaComponent,\r\n    AuthorDetailsComponent,\r\n    StatsCardComponent,\r\n    ClientComponent,\r\n    ReservationComponent,\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    StickyHeaderModule,\r\n    NavbarModule,\r\n    NgxPaginationModule,\r\n    ToastModule.forRoot(),\r\n    ToastrModule.forRoot(),\r\n    MDBBootstrapModulesPro.forRoot(),\r\n    AgmCoreModule.forRoot({\r\n      // https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en#key\r\n      apiKey: 'Your_api_key'\r\n    }),\r\n    AppRoutingModule,\r\n    CommonModule,\r\n    FlatpickrModule.forRoot(),\r\n    CalendarModule.forRoot({\r\n      provide: DateAdapter,\r\n      useFactory: adapterFactory,\r\n    }),\r\n  ],\r\n  entryComponents: [LoginComponent, RegisterComponent],\r\n  providers: [\r\n    MDBSpinningPreloader,\r\n    authInterceptorProviders,\r\n\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  schemas: [NO_ERRORS_SCHEMA]\r\n})\r\nexport class AppModule {\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpRequest} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\n\r\nconst API_URL = 'http://localhost:8080/api/book-image/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookImageUrlService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllImageBook(): Observable<any> {\r\n    return this.http.get(API_URL);\r\n  }\r\n\r\n  addBookImageUrl(title: string, file: File): Observable<any> {\r\n    const formData: FormData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('title', title);\r\n\r\n    const req = new HttpRequest('POST', API_URL, formData, {\r\n      reportProgress: true,\r\n      responseType: 'json'\r\n    });\r\n\r\n    return this.http.request(req);\r\n  }\r\n\r\n  deleteBookImageById(id: number): Observable<any> {\r\n    return this.http.delete(API_URL + id);\r\n  }\r\n\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\r\nimport {ModalDirective} from 'ng-uikit-pro-standard';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {FormArray, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {BookService} from '../../_services/book.service';\r\nimport {UserService} from '../../_services/user.service';\r\nimport {ClientService} from '../../_services/client.service';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {Client} from 'src/app/model/Client';\r\nimport {TokenStorageService} from '../../_services/token-storage.service';\r\nimport {User} from '../../model/User';\r\nimport {ReservationStateService} from '../../_services/reservation-state.service';\r\nimport {ReservationService} from '../../_services/reservation.service';\r\nimport {ReloadPageService} from '../../_services/reload-page.service';\r\nimport {AlertsService} from '../../_services/alerts.service';\r\nimport {Reservation} from '../../model/Reservation';\r\n\r\n@Component({\r\n  selector: 'app-reservation',\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  templateUrl: './reservation.component.html',\r\n  styleUrls: ['./reservation.component.scss']\r\n})\r\nexport class ReservationComponent implements OnInit {\r\n  reservationForm: FormGroup;\r\n  bookForm: FormGroup;\r\n  bookTableRows: FormArray;\r\n  editReservationForm: FormGroup;\r\n\r\n  bookList = [];\r\n  selectedBook = [];\r\n  updateSelectedBook = [];\r\n  userList = [];\r\n  clientList = [];\r\n  filteredOptionsClient: Observable<Client[]>;\r\n  searchClient = new Subject();\r\n  reservationStateList = [];\r\n  reservationList = [];\r\n\r\n  stockBook: number;\r\n  currentUser: User;\r\n\r\n  isCanceled = false;\r\n  isFinalised = false;\r\n\r\n  constructor(private bookService: BookService,\r\n              private userService: UserService,\r\n              private clientService: ClientService,\r\n              private tokenService: TokenStorageService,\r\n              private formBuilder: FormBuilder,\r\n              private reservationService: ReservationService,\r\n              private alertService: AlertsService,\r\n              private reservationStateService: ReservationStateService,\r\n              private reloadPageService: ReloadPageService\r\n  ) {\r\n    this.bookForm = this.formBuilder.group({\r\n      items: [null, Validators.required],\r\n    });\r\n    this.bookTableRows = this.formBuilder.array([]);\r\n\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.formReservation();\r\n    this.getAllBooks();\r\n    this.getAllClients();\r\n    this.getAllReservationState();\r\n    this.getAllUser();\r\n    this.getAllReservations();\r\n    this.currentUser = this.tokenService.getUser();\r\n    this.bookForm.addControl('bookTableRows', this.bookTableRows);\r\n\r\n  }\r\n\r\n  onAddRow() {\r\n    this.bookTableRows.push(this.createItemFormGroup());\r\n  }\r\n\r\n\r\n  onRemoveRow(rowIndex: number) {\r\n    this.bookTableRows.removeAt(rowIndex);\r\n  }\r\n\r\n  createItemFormGroup(): FormGroup {\r\n    return this.formBuilder.group({\r\n      bookList: new FormControl('')\r\n    });\r\n  }\r\n\r\n  formReservation() {\r\n    this.reservationForm = new FormGroup({\r\n      bookList: new FormControl(this.selectedBook),\r\n      user: new FormControl(''),\r\n      client: new FormControl(''),\r\n      startDate: new FormControl(''),\r\n      endDate: new FormControl(''),\r\n      reservationState: new FormControl('')\r\n    });\r\n  }\r\n\r\n  editFormReservation(reservation: Reservation, modalDirective: ModalDirective) {\r\n\r\n    this.bookTableRows.clear();\r\n    const clientSelected = this.clientList.find(i => i.id == reservation.client.id);\r\n    const reservationStateSelected = this.reservationStateList.find(i => i.id == reservation.reservationState.id);\r\n\r\n    this.editReservationForm = new FormGroup({\r\n      id: new FormControl(reservation.id),\r\n      bookList: new FormControl(this.updateSelectedBook),\r\n      client: new FormControl(reservation.client),\r\n      startDate: new FormControl(reservation.startDate),\r\n      endDate: new FormControl(reservation.endDate),\r\n      reservationState: new FormControl(reservation.reservationState)\r\n    });\r\n\r\n    for (let i = 0; i < reservation.bookList.length; i++) {\r\n      const bookSelected = this.bookList.find(j => j.id == reservation.bookList[i].id);\r\n      this.bookTableRows.controls.push(new FormGroup({\r\n        bookList: new FormControl(bookSelected)\r\n      }));\r\n    }\r\n\r\n    this.editReservationForm.get('client').setValue(clientSelected);\r\n    this.editReservationForm.get('reservationState').setValue(reservationStateSelected);\r\n\r\n    // CHECK STATE OF LIST\r\n    const created = this.reservationStateList.find(i => i.nameOfState === 'Created');\r\n    const finalised = this.reservationStateList.find(i => i.nameOfState === 'Finalised');\r\n    const canceled = this.reservationStateList.find(i => i.nameOfState === 'Canceled');\r\n\r\n    if (this.editReservationForm.value.reservationState === created) {\r\n      this.isFinalised = true;\r\n      this.isCanceled = true;\r\n    }\r\n    if (this.editReservationForm.value.reservationState === finalised) {\r\n      this.isFinalised = false;\r\n      this.isCanceled = false;\r\n    }\r\n    if (this.editReservationForm.value.reservationState === canceled) {\r\n      this.isFinalised = false;\r\n      this.isCanceled = false;\r\n    }\r\n    // END\r\n\r\n    modalDirective.toggle();\r\n  }\r\n\r\n  getAllBooks() {\r\n    this.bookService.getAllBooks().subscribe((data: any) => {\r\n      this.bookList = data;\r\n    }, error => {\r\n      this.bookList = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getAllUser() {\r\n    return this.userService.getUsers().subscribe((data: any) => {\r\n      this.userList = data;\r\n    }, error => {\r\n      this.userList = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getAllClients() {\r\n    this.clientService.getAllClients().subscribe((data: any) => {\r\n      this.clientList = data;\r\n      this.filteredOptionsClient = this.searchClient.pipe(startWith(''), map((text: string) => this.filterClient(text)));\r\n    }, error => {\r\n      this.clientList = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  getAllReservations() {\r\n    this.reservationService.getAllReservationsFromDb().subscribe((data: any) => {\r\n      this.reservationList = data;\r\n    }, error => {\r\n      this.reservationList = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  filterClient(value: string) {\r\n    const filterValue = value.toLowerCase();\r\n    return this.clientList.filter((client: any) => client.firstName.toLowerCase().includes(filterValue) ||\r\n      client.lastName.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  getAllReservationState() {\r\n    this.reservationStateService.getAllStates().subscribe((data: any) => {\r\n      this.reservationStateList = data;\r\n    }, error => {\r\n      this.reservationStateList = JSON.parse(error.message).message;\r\n    });\r\n  }\r\n\r\n  addReservation(modalDirective: ModalDirective) {\r\n    for (let i = 0; i < this.bookTableRows.length; i++) {\r\n      this.selectedBook.push(this.bookForm.value.bookTableRows[i].bookList);\r\n    }\r\n    for (let j = 0; j < this.userList.length; j++) {\r\n      if (this.userList[j].email === this.currentUser.email) {\r\n        this.reservationForm.get('user').setValue(this.userList[j]);\r\n      }\r\n    }\r\n    this.reservationService.addReservation(this.reservationForm.value)\r\n      .subscribe(response => {\r\n        this.alertService.success();\r\n        modalDirective.toggle();\r\n        this.reloadPageService.reload();\r\n      }, error => {\r\n        console.log(error.message);\r\n      });\r\n  }\r\n\r\n  updateReservation(modalDirective: ModalDirective) {\r\n    const index = this.reservationList.findIndex(reservation => reservation.id == this.editReservationForm.value.id);\r\n    this.reservationList[index] = this.editReservationForm.value;\r\n    const id = this.reservationList[index].id;\r\n\r\n    for (let i = 0; i < this.bookTableRows.length; i++) {\r\n      this.updateSelectedBook.push(this.bookForm.value.bookTableRows[i].bookList);\r\n    }\r\n\r\n    this.reservationService.editReservationById(id, this.reservationList[index]).subscribe(response => {\r\n      this.reloadPageService.reload();\r\n      this.alertService.success();\r\n      modalDirective.toggle();\r\n    }, error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  showReservationFrame(modalDirective: ModalDirective) {\r\n    modalDirective.toggle();\r\n    const created = this.reservationStateList.find(i => i.nameOfState === 'Created');\r\n    this.reservationForm.get('reservationState').setValue(created);\r\n    this.bookTableRows.clear();\r\n  }\r\n\r\n  cancelReservation() {\r\n    const canceled = this.reservationStateList.find(i => i.nameOfState === 'Canceled');\r\n    this.editReservationForm.get('reservationState').setValue(canceled);\r\n  }\r\n\r\n  finaliseReservation() {\r\n    const finalised = this.reservationStateList.find(i => i.nameOfState === 'Finalised');\r\n    this.editReservationForm.get('reservationState').setValue(finalised);\r\n  }\r\n\r\n  isBookDisabled(object: any) {\r\n    const created = this.reservationStateList.find(i => i.nameOfState === 'Created');\r\n    if (!created) {\r\n      return this.bookList.includes(object);\r\n    }\r\n  }\r\n\r\n  isClientDisabled(object: any) {\r\n    return this.clientList.includes(object);\r\n  }\r\n\r\n  isStateDisabled(object: any) {\r\n    return this.reservationStateList.includes(object);\r\n  }\r\n}\r\n","<!-- Navbar Reservation-->\r\n<mdb-navbar\r\n  SideClass=\"navbar fixed-top-author navbar-toggleable-md\r\n  navbar-expand-lg scrolling-navbar\r\n  double-nav grey lighten-5 navbar-dark\"\r\n  [containerInside]=\"false\">\r\n  <navlinks class=\"navbar-container\">\r\n    <mdb-icon class=\"fas-author\" fas icon=\"calendar-alt\"></mdb-icon>\r\n  </navlinks>\r\n  <navlinks class=\"navbar-container\">\r\n    <span class=\"clearfix d-none d-sm-inline-block span-reservation\">Reservations</span>\r\n  </navlinks>\r\n  <navlinks>\r\n    <ul class=\"nav navbar-nav nav-flex-icons ml-auto ie-double-nav\">\r\n      <li class=\"nav-item\">\r\n        <span class=\"table-add float-right mr-2\">\r\n        <a (click)=\"showReservationFrame(reservationFrame)\" class=\"text-success\">\r\n          <mdb-icon fas icon=\"plus\" size=\"2x\"></mdb-icon>\r\n        </a>\r\n      </span>\r\n      </li>\r\n    </ul>\r\n  </navlinks>\r\n</mdb-navbar>\r\n<!-- End Navbar -->\r\n\r\n<!--TABLE HOLDING THE INFORMATION-->\r\n<div class=\"container-fluid my-5\">\r\n  <table class=\"add-reservation table-hover z-depth-1-half\">\r\n    <thead class=\"add-reservation-thead\">\r\n    <tr class=\"text-center\">\r\n      <th rowspan=\"2\" scope=\"col\">Start Date</th>\r\n      <th rowspan=\"2\" scope=\"col\">End Date</th>\r\n      <th colspan=\"2\" scope=\"col\">Employee</th>\r\n      <th rowspan=\"2\" scope=\"col\">State</th>\r\n      <th colspan=\"3\" scope=\"col\">Client</th>\r\n      <th rowspan=\"2\" scope=\"col\">Book</th>\r\n      <th rowspan=\"2\" scope=\"col\">Processed Date</th>\r\n      <th rowspan=\"2\" scope=\"col\">Action</th>\r\n    </tr>\r\n    <tr class=\"text-center\">\r\n      <th>First Name</th>\r\n      <th>Last Name</th>\r\n      <th>First Name</th>\r\n      <th>Last Name</th>\r\n      <th>Phone number</th>\r\n    </tr>\r\n\r\n    </thead>\r\n    <tbody *ngFor=\"let reservation of reservationList\">\r\n    <tr>\r\n      <td>\r\n        {{reservation.startDate}}\r\n      </td>\r\n      <td>\r\n        {{reservation.endDate}}\r\n      </td>\r\n      <td>\r\n        {{currentUser.name}}\r\n      </td>\r\n      <td>\r\n        {{currentUser.lastName}}\r\n      </td>\r\n      <td>\r\n        {{reservation.reservationState.nameOfState}}\r\n      </td>\r\n      <td>\r\n        {{reservation.client.firstName}}\r\n      </td>\r\n      <td>\r\n        {{reservation.client.lastName}}\r\n      </td>\r\n      <td>\r\n        {{reservation.client.phoneNumber}}\r\n      </td>\r\n      <td>\r\n        <ul *ngFor=\"let book of reservation.bookList\">\r\n          <li>\r\n            {{book.title}}\r\n          </li>\r\n        </ul>\r\n\r\n      </td>\r\n      <td>\r\n        {{reservation.processedDate | date: 'medium'}}\r\n      </td>\r\n      <td>\r\n        <a (click)=\"editFormReservation(reservation, editReservationFrame)\" style=\"color: #ffbb33;\">\r\n          <mdb-icon fas icon=\"calendar-check\" size=\"lg\"></mdb-icon>\r\n          Edit</a>\r\n      </td>\r\n\r\n    </tr>\r\n    </tbody>\r\n    <tfoot>\r\n    </tfoot>\r\n  </table>\r\n</div>\r\n\r\n<!--END TABLE-->\r\n\r\n<!--MODAL TO ADD RESERVATION-->\r\n<div #reservationFrame=\"mdbModal\" aria-hidden=\"true\" aria-labelledby=\"myBasicModalLabel\" class=\"modal fade right\" mdbModal\r\n     role=\"dialog\"\r\n     tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable modal-lg\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <button (click)=\"reservationFrame.hide()\" aria-label=\"Close\" class=\"close pull-right\"\r\n                type=\"button\">\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n        <h4 class=\"modal-title w-100\" id=\"myModalLabel\">Reservation</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <ng-container *ngIf=\"reservationForm\">\r\n          <form (ngSubmit)=\"addReservation(reservationFrame)\" [formGroup]=\"reservationForm\">\r\n            <table class=\"table table-hover\">\r\n              <thead>\r\n              <tr>\r\n                <th>Start Date:</th>\r\n                <th>End Date:</th>\r\n                <th>Employee</th>\r\n                <th>State</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input class=\"form-control\" formControlName=\"startDate\" type=\"date\">\r\n                </td>\r\n                <td>\r\n                  <input class=\"form-control\" formControlName=\"endDate\" type=\"date\">\r\n                </td>\r\n                <td>{{currentUser.email}}</td>\r\n                <td>\r\n                  <mdb-select-2 formControlName=\"reservationState\">\r\n                    <mdb-select-option *ngFor=\"let state of reservationStateList\" [value]=\"state\">\r\n                      {{state.nameOfState}}\r\n                    </mdb-select-option>\r\n                  </mdb-select-2>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-2\">\r\n                <div class=\"md-form\">\r\n                  <mdb-card-text>\r\n                    Client:\r\n                  </mdb-card-text>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-7\">\r\n                <div class=\"md-form\">\r\n                  <mdb-select-2 formControlName=\"client\" placeholder=\"Select Client\">\r\n                    <mdb-select-filter (ngModelChange)=\"searchClient.next($event)\"\r\n                                       [ngModel]=\"searchClient | async\"\r\n                                       formControlName=\"client\">\r\n                    </mdb-select-filter>\r\n                    <mdb-select-option *ngFor=\"let client of filteredOptionsClient | async\"\r\n                                       [value]=\"client\">\r\n                      {{client.firstName}} {{client.lastName}}\r\n                    </mdb-select-option>\r\n                  </mdb-select-2>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-3 mr-auto\">\r\n                <div class=\"md-form\">\r\n                  <button color=\"default\" mdbBtn mdbWavesEffect size=\"md\" type=\"button\">Add Client\r\n                    <mdb-icon class=\"ml-1\" fas icon=\"plus\"></mdb-icon>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ng-container *ngIf=\"bookForm\">\r\n              <form [formGroup]=\"bookForm\">\r\n                <div class=\"row\">\r\n                  <table class=\"table table-hover\">\r\n                    <thead>\r\n                    <tr>\r\n                      <th>Book</th>\r\n                      <th>Action</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <td>\r\n                      <button (click)=\"onAddRow()\" *ngIf=\"bookForm.get('bookTableRows')\" color=\"default\"\r\n                              mdbBtn\r\n                              mdbWavesEffect size=\"md\" type=\"button\">Add Book\r\n                        <mdb-icon class=\"ml-1\" fas icon=\"plus\"></mdb-icon>\r\n                      </button>\r\n                    </td>\r\n                    <tr *ngFor=\"let row of bookTableRows.controls; let index = index;\"\r\n                        formArrayName=\"bookTableRows\">\r\n                      <td class=\"col-md-6\">\r\n                        <mdb-select-2 [formControl]=\"row.get('bookList')\" placeholder=\"Select book\">\r\n                          <!--                    <mdb-select-filter></mdb-select-filter>-->\r\n                          <mdb-select-option *ngFor=\"let book of bookList \"\r\n                                             [value]=\"book\">{{book.title}}</mdb-select-option>\r\n                        </mdb-select-2>\r\n                      </td>\r\n                      <td class=\"col-md-6\">\r\n                        <button (click)=\"onRemoveRow(index)\" color=\"danger\" mdbBtn mdbWavesEffect size=\"sm\"\r\n                                type=\"button\">\r\n                          <i class=\"far fa-trash-alt fa-lg\"></i>\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </form>\r\n            </ng-container>\r\n            <div class=\"modal-footer text-left\">\r\n              <button class=\"relative waves-light\" color=\"primary\" mdbBtn mdbWavesEffect\r\n                      type=\"submit\">Save\r\n                <i class=\"far fa-save fa-lg ml-1\"></i>\r\n              </button>\r\n              <button (click)=\"reservationFrame.hide()\" aria-label=\"Close\" class=\"relative waves-light\" color=\"light\"\r\n                      mdbBtn\r\n                      mdbWavesEffect type=\"button\">Cancel\r\n                <i class=\"fas fa-times fa-lg ml-1\"></i></button>\r\n            </div>\r\n          </form>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!--END MODAL-->\r\n\r\n<!--MODAL TO EDIT RESERVATION-->\r\n<div #editReservationFrame=\"mdbModal\" aria-hidden=\"true\" aria-labelledby=\"myBasicModalLabel\" class=\"modal fade right\" mdbModal\r\n     role=\"dialog\"\r\n     tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable modal-lg\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <button (click)=\"editReservationFrame.hide()\" aria-label=\"Close\" class=\"close pull-right\"\r\n                type=\"button\">\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n        <h4 class=\"modal-title w-100\">Reservation</h4>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <ng-container *ngIf=\"editReservationForm\">\r\n          <form [formGroup]=\"editReservationForm\" (ngSubmit)=\"updateReservation(editReservationFrame)\">\r\n            <table class=\"table table-hover\">\r\n              <thead>\r\n              <tr>\r\n                <th>Start Date:</th>\r\n                <th>End Date:</th>\r\n                <th>Employee</th>\r\n                <th>State</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input class=\"form-control\" formControlName=\"startDate\" type=\"date\" disabled=\"isCanceled? isCanceled : isFinalised\">\r\n                </td>\r\n                <td>\r\n                  <input class=\"form-control\" formControlName=\"endDate\" type=\"date\" disabled=\"isCanceled? isCanceled : isFinalised\">\r\n                </td>\r\n                <td>{{currentUser.email}}</td>\r\n                <td>\r\n                  <mdb-select-2 formControlName=\"reservationState\">\r\n                    <mdb-select-option *ngFor=\"let state of reservationStateList\" [value]=\"state\" [disabled]=\"isStateDisabled(state)\">\r\n                      {{state.nameOfState}}\r\n                    </mdb-select-option>\r\n                  </mdb-select-2>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-2\">\r\n                <div class=\"md-form\">\r\n                  <mdb-card-text>\r\n                    Client:\r\n                  </mdb-card-text>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm-7\">\r\n                <div class=\"md-form\">\r\n                  <mdb-select-2 formControlName=\"client\" placeholder=\"Select Client\">\r\n<!--                                        <mdb-select-filter [ngModel]=\"searchClient | async\" (ngModelChange)=\"searchClient.next($event)\"-->\r\n<!--                                                           formControlName=\"client\">-->\r\n<!--                                        </mdb-select-filter>-->\r\n                    <mdb-select-option *ngFor=\"let client of filteredOptionsClient | async\" [disabled]=\"isClientDisabled(client)\"\r\n                                       [value]=\"client\">\r\n                      {{client.firstName}} {{client.lastName}}\r\n                    </mdb-select-option>\r\n                  </mdb-select-2>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-3 mr-auto\">\r\n                <div class=\"md-form\">\r\n                  <button *ngIf=\"isCanceled? isCanceled : isFinalised\"\r\n                    color=\"default\" mdbBtn mdbWavesEffect size=\"md\" type=\"button\">Add Client\r\n                    <mdb-icon class=\"ml-1\" fas icon=\"plus\"></mdb-icon>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ng-container *ngIf=\"bookForm\">\r\n              <form [formGroup]=\"bookForm\">\r\n                <div class=\"row\">\r\n                  <table class=\"table table-hover\">\r\n                    <thead>\r\n                    <tr>\r\n                      <th>Book</th>\r\n                      <th>Action</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <td>\r\n                        <button (click)=\"onAddRow()\" *ngIf=\"isCanceled? isCanceled : isFinalised\"\r\n                                color=\"default\"\r\n                                mdbBtn\r\n                                mdbWavesEffect size=\"md\" type=\"button\">Add Book\r\n                          <mdb-icon class=\"ml-1\" fas icon=\"plus\"></mdb-icon>\r\n                        </button>\r\n                      </td>\r\n\r\n                      <tr formArrayName=\"bookTableRows\" *ngFor=\"let row of bookTableRows.controls;\r\n                      let index = index;\">\r\n                        <td class=\"col-md-6\" [formGroupName]=\"index\">\r\n                          <mdb-select-2 formControlName=\"bookList\" placeholder=\"Select Book\">\r\n                            <mdb-select-option *ngFor=\"let book of bookList \" [disabled]=\"isBookDisabled(book)\"\r\n                                    [value]=\"book\">{{book.title}}</mdb-select-option>\r\n                          </mdb-select-2>\r\n                        </td>\r\n                        <td class=\"col-md-6\">\r\n                          <button (click)=\"onRemoveRow(index)\" *ngIf=\"isCanceled? isCanceled : isFinalised\"\r\n                                  color=\"danger\" mdbBtn mdbWavesEffect size=\"sm\"\r\n                                  type=\"button\"><i class=\"far fa-trash-alt fa-lg\"></i>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </form>\r\n            </ng-container>\r\n            <div class=\"cancel-reservation\">\r\n              <button (click)=\"cancelReservation()\" *ngIf=\"isCanceled\"\r\n                      class=\"waves-light\"\r\n                      style=\"background:\r\n              brown; color:\r\n              white\" mdbBtn mdbWavesEffect\r\n                      type=\"submit\">Cancel Reservation\r\n                <i class=\"fas fa-ban fa-lg ml-1\"></i>\r\n              </button>\r\n              <button (click)=\"finaliseReservation()\" *ngIf=\"isFinalised\" class=\"waves-light\"\r\n                      style=\"background:\r\n              darkgreen; color:\r\n              white\" mdbBtn mdbWavesEffect\r\n                      type=\"submit\">Finalise Reservation\r\n                <i class=\"fas fa-check fa-lg ml-1\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"save-reservation\">\r\n              <button *ngIf=\"isCanceled? isCanceled : isFinalised\"  class=\"relative waves-light\"\r\n                      color=\"primary\"\r\n                      mdbBtn\r\n                      mdbWavesEffect\r\n                      type=\"submit\">Save\r\n                <i class=\"far fa-save fa-lg ml-1\"></i>\r\n              </button>\r\n              <button (click)=\"editReservationFrame.hide()\" aria-label=\"Close\" class=\"relative waves-light\" color=\"light\"\r\n                      mdbBtn\r\n                      mdbWavesEffect type=\"button\">Close\r\n                <i class=\"fas fa-times fa-lg ml-1\"></i></button>\r\n            </div>\r\n          </form>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!--END MODAL-->\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AuthorService} from '../../_services/author.service';\r\nimport {FormControl, FormGroup} from '@angular/forms';\r\nimport {AuthorImageUrlService} from '../../_services/author-image-url.service';\r\nimport {ModalDirective} from 'ng-uikit-pro-standard';\r\nimport {Author} from '../../model/Author';\r\nimport {Router} from '@angular/router';\r\nimport {AlertsService} from '../../_services/alerts.service';\r\nimport swal from 'sweetalert';\r\nimport {ReloadPageService} from '../../_services/reload-page.service';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-author',\r\n  templateUrl: './author.component.html',\r\n  styleUrls: ['./author.component.scss']\r\n})\r\nexport class AuthorComponent implements OnInit {\r\n\r\n  authors = [];\r\n  imageUrlList = [];\r\n  addAuthorForm: FormGroup;\r\n  editAuthorForm: FormGroup;\r\n  dateForm: FormGroup;\r\n  errorMessageAddAuthor = '';\r\n  isAuthorAlreadyExist = false;\r\n\r\n  constructor(private authorService: AuthorService,\r\n              private authorImageUrl: AuthorImageUrlService,\r\n              private alertsService: AlertsService,\r\n              private reloadPageService: ReloadPageService,\r\n              private sanitizer: DomSanitizer,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAuthors();\r\n    this.getImageUrlAuthors();\r\n    this.formAuthor();\r\n\r\n    this.dateForm = new FormGroup({\r\n      dateBirth: new FormControl(''),\r\n      deathDate: new FormControl('')\r\n    });\r\n\r\n  }\r\n\r\n  getAuthors() {\r\n    this.authorService.getAllAuthors().subscribe((data: any) => {\r\n        this.authors = data;\r\n\r\n        this.authors.forEach((image: any) => {\r\n          image.authorImageUrl.imageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${image.authorImageUrl.imageUrl}`);\r\n        });\r\n\r\n      },\r\n      error => {\r\n        this.authors = JSON.parse(error.message).message;\r\n      });\r\n  }\r\n\r\n  getImageUrlAuthors() {\r\n    this.authorImageUrl.getAllImages().subscribe((data: any) => {\r\n        this.imageUrlList = data;\r\n      },\r\n      error => {\r\n        this.imageUrlList = JSON.parse(error.message).message;\r\n      });\r\n  }\r\n\r\n  formAuthor() {\r\n    this.addAuthorForm = new FormGroup({\r\n      firstName: new FormControl(''),\r\n      lastName: new FormControl(''),\r\n      dateOfBirth: new FormControl(''),\r\n      nationality: new FormControl(''),\r\n      description: new FormControl(''),\r\n      type: new FormControl(''),\r\n      authorImageUrl: new FormControl('')\r\n    });\r\n  }\r\n\r\n  editFormAuthor(author: Author, modalDirective: ModalDirective) {\r\n    const authorImageSelected = this.imageUrlList.find(i => i.id == author.authorImageUrl.id);\r\n\r\n    modalDirective.toggle();\r\n\r\n    this.editAuthorForm = new FormGroup({\r\n      id: new FormControl(author.id),\r\n      firstName: new FormControl(author.firstName),\r\n      lastName: new FormControl(author.lastName),\r\n      dateOfBirth: new FormControl(author.dateOfBirth),\r\n      nationality: new FormControl(author.nationality),\r\n      description: new FormControl(author.description),\r\n      type: new FormControl(author.type),\r\n      bookList: new FormControl(author.bookSet),\r\n      authorImageUrl: new FormControl(author.authorImageUrl)\r\n    });\r\n\r\n    this.editAuthorForm.get('authorImageUrl').setValue(authorImageSelected);\r\n\r\n  }\r\n\r\n  addAuthor(modalDirective: ModalDirective) {\r\n    // tslint:disable-next-line:max-line-length\r\n    this.addAuthorForm.controls.dateOfBirth.setValue(this.dateForm.controls.dateBirth.value + ' - ' + this.dateForm.controls.deathDate.value);\r\n\r\n    if (this.addAuthorForm.value.authorImageUrl == '') {\r\n      this.addAuthorForm.get('authorImageUrl').setValue(null);\r\n    }\r\n\r\n    this.authorService.addAuthor(this.addAuthorForm.value).subscribe(response => {\r\n        this.isAuthorAlreadyExist = false;\r\n        this.alertsService.success();\r\n        modalDirective.toggle();\r\n        this.reloadPageService.reload();\r\n      },\r\n      err => {\r\n        this.errorMessageAddAuthor = err.error.message;\r\n        this.isAuthorAlreadyExist = true;\r\n      });\r\n  }\r\n\r\n  updateAuthor(modalDirective: ModalDirective): void {\r\n    const index = this.authors.findIndex(author => author.id == this.editAuthorForm.value.id);\r\n    this.authors[index] = this.editAuthorForm.value;\r\n    const id = this.authors[index].id;\r\n\r\n    this.authorService.editAuthorById(id, this.authors[index]).subscribe(response => {\r\n      this.alertsService.success();\r\n      this.isAuthorAlreadyExist = false;\r\n      modalDirective.toggle();\r\n      this.reloadPageService.reload();\r\n    }, err => {\r\n      this.errorMessageAddAuthor = err.error.message;\r\n      this.isAuthorAlreadyExist = true;\r\n    });\r\n  }\r\n\r\n  deleteAuthor(author: Author) {\r\n\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'Once deleted, you will not be able to recover this registration!',\r\n      icon: 'warning',\r\n      buttons: ['Cancel', 'Ok'],\r\n      dangerMode: true,\r\n    })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          this.authorService.deleteAuthorById(Number(author.id)).subscribe(response => {\r\n            this.reloadPageService.reload();\r\n          }, error => {\r\n            console.log(error);\r\n          });\r\n          swal('Your registration/file has been deleted!', {\r\n            icon: 'success',\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  sendToAuthorInfo(author: Author) {\r\n    this.router.navigateByUrl('dashboard/author/' + author.id);\r\n  }\r\n\r\n}\r\n","<!-- Navbar Authors-->\r\n<mdb-navbar\r\n  SideClass=\"navbar fixed-top-author navbar-toggleable-md navbar-expand-lg scrolling-navbar double-nav grey lighten-5 navbar-dark\"\r\n  [containerInside]=\"false\">\r\n  <navlinks class=\"navbar-container\">\r\n    <mdb-icon class=\"fas-author\" fas icon=\"address-book\"></mdb-icon>\r\n  </navlinks>\r\n  <navlinks class=\"navbar-container\">\r\n    <span class=\"clearfix d-none d-sm-inline-block span-author\">Authors</span>\r\n  </navlinks>\r\n  <navlinks>\r\n    <ul class=\"nav navbar-nav nav-flex-icons ml-auto ie-double-nav\">\r\n      <li class=\"nav-item\">\r\n        <button (click)=\"addAuthorFrame.show()\" color=\"primary\" mdbBtn mdbWavesEffect rounded=\"true\"\r\n                size=\"md\"\r\n                type=\"button\">Add Author\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </navlinks>\r\n</mdb-navbar>\r\n<!-- End navbar -->\r\n\r\n<!-- Modal Add new Author -->\r\n<div #addAuthorFrame=\"mdbModal\" aria-hidden=\"false\" aria-labelledby=\"myModalLabel\"\r\n     class=\"modal fade top\"\r\n     id=\"addAuthor\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <!--Header-->\r\n      <div class=\"modal-header text-center custom-header-modal\">\r\n        <img src=\"./assets/images/authorAddIcon.png\" class=\"mx-auto\">\r\n\r\n        <button (click)=\"addAuthorFrame.hide()\" aria-label=\"Close\" class=\"close\"\r\n                data-dismiss=\"modal\"\r\n                type=\"button\">\r\n          <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <!--Body-->\r\n      <div class=\"modal-body\">\r\n\r\n        <form #addAuthorExist=\"ngForm\"\r\n              (ngSubmit)=\"addAuthorExist.form.valid && addAuthor(addAuthorFrame)\"\r\n              [formGroup]=\"addAuthorForm\">\r\n          <div class=\"row\">\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"firstName\">First Name</label>\r\n                <input class=\"form-control\" formControlName=\"firstName\" id=\"firstName\" type=\"text\">\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"lastName\">Last name</label>\r\n                <input class=\"form-control\" formControlName=\"lastName\" id=\"lastName\"\r\n                       type=\"text\">\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-4\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"signature\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"type\">Type</label>\r\n                <input class=\"form-control\" formControlName=\"type\" id=\"type\"\r\n                       placeholder=\"Ex: Poet, Romancer, Novelist...\" type=\"text\">\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <form [formGroup]=\"dateForm\">\r\n            <div class=\"row\">\r\n              <div class=\"col-6\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon class=\"prefix grey-text\" far icon=\"far fa-calendar-alt\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"dateOfBirth\">Year of Birth</label>\r\n                  <input class=\"form-control\" formControlName=\"dateBirth\" id=\"dateOfBirth\"\r\n                         maxlength=\"4\"\r\n                         mdbInput type=\"text\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon class=\"prefix grey-text\" far icon=\"far fa-calendar-alt\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"deathDate\">Year of Death</label>\r\n                  <input class=\"form-control\" formControlName=\"deathDate\" id=\"deathDate\"\r\n                         maxlength=\"4\" type=\"text\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-6\">\r\n              <div class=\"form-group\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"flag\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"nationality\">Nationality</label>\r\n                <input class=\"form-control\" formControlName=\"nationality\" id=\"nationality\"\r\n                       type=\"text\">\r\n              </div>\r\n            </div>\r\n            <div class=\"col-6\">\r\n              <mdb-icon class=\"prefix grey-text\" fas icon=\"universal-access\"></mdb-icon>\r\n              <label class=\"col-sm-6 col-form-label\" for=\"imageUrl\">Profile Image</label>\r\n              <select class=\"form-control\" formControlName=\"authorImageUrl\" id=\"imageUrl\">\r\n                <option disabled hidden selected value=\"\">Select image of author by name</option>\r\n                <option *ngFor=\"let image of imageUrlList\" [ngValue]=\"image\">\r\n                  {{image.title}}\r\n                </option>\r\n              </select>\r\n            </div>\r\n\r\n            <div class=\"form-group col-12\">\r\n              <mdb-icon class=\"prefix grey-text\" far icon=\"far fa-comment-alt\"></mdb-icon>\r\n              <label class=\"col-sm-6 col-form-label\" for=\"description\">Description</label>\r\n              <textarea class=\"form-control\" formControlName=\"description\" id=\"description\"\r\n                        type=\"text\"></textarea>\r\n            </div>\r\n          </div>\r\n\r\n          <div *ngIf=\"addAuthorExist.submitted && isAuthorAlreadyExist\" class=\"alert alert-warning\">\r\n            {{errorMessageAddAuthor}}\r\n          </div>\r\n\r\n          <div class=\"justify-content-center\" style=\"display: flex\">\r\n            <button mdbBtn mdbWavesEffect style=\"background: brown; color: white\"\r\n                    rounded=\"true\" type=\"submit\">Save\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- End modal -->\r\n\r\n<!-- Edit Author Modal -->\r\n<div #frameEditAuthor=\"mdbModal\" aria-hidden=\"false\" aria-labelledby=\"myModalLabel\"\r\n     class=\"modal fade top\"\r\n     id=\"frameEditAuthor\"\r\n     mdbModal\r\n     role=\"dialog\" tabindex=\"-1\">\r\n  <div class=\"modal-dialog-scrollable\" role=\"document\">\r\n    <!--Content-->\r\n    <div class=\"modal-content\">\r\n      <ng-container *ngIf=\"editAuthorForm\">\r\n        <!--Header-->\r\n        <div class=\"modal-header text-center custom-header-modal\">\r\n          <img src=\"./assets/images/authorAddIcon.png\" class=\"mx-auto\">\r\n          <button (click)=\"frameEditAuthor.hide()\" aria-label=\"Close\" class=\"close\"\r\n                  data-dismiss=\"modal\"\r\n                  type=\"button\">\r\n            <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <!--Body-->\r\n        <div class=\"modal-body\">\r\n\r\n          <form #editAuthorExist=\"ngForm\" (ngSubmit)=\"editAuthorExist.form.valid &&\r\n          updateAuthor(frameEditAuthor)\"\r\n                [formGroup]=\"editAuthorForm\">\r\n            <div class=\"row\">\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"firstNameEdit\">First Name</label>\r\n                  <input class=\"form-control\" formControlName=\"firstName\" id=\"firstNameEdit\"\r\n                         type=\"text\" mdbCharCounter mdbInput>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon class=\"prefix grey-text\" fas icon=\"user\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"lastNameEdit\">Last name</label>\r\n                  <input class=\"form-control\" formControlName=\"lastName\" id=\"lastNameEdit\"\r\n                         type=\"text\" mdbCharCounter mdbInput>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-4\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon class=\"prefix grey-text\" fas icon=\"signature\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"typeEdit\">Type</label>\r\n                  <input class=\"form-control\" formControlName=\"type\" id=\"typeEdit\"\r\n                         placeholder=\"Ex: Poet, Romancer, Novelist...\" type=\"text\" mdbCharCounter mdbInput>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-6\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon class=\"prefix grey-text\" far icon=\"far fa-calendar-alt\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"dateOfBirthEdit\">Years</label>\r\n                  <input class=\"form-control\" formControlName=\"dateOfBirth\" id=\"dateOfBirthEdit\"\r\n                         maxlength=\"11\" length=\"11\"\r\n                         mdbInput type=\"text\" mdbCharCounter>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-6\">\r\n                <div class=\"form-group\">\r\n                  <mdb-icon class=\"prefix grey-text\" fas icon=\"flag\"></mdb-icon>\r\n                  <label class=\"col-sm-6 col-form-label\" for=\"nationalityEdit\">Nationality</label>\r\n                  <input class=\"form-control\" formControlName=\"nationality\" id=\"nationalityEdit\"\r\n                         type=\"text\" mdbCharCounter mdbInput>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-6\">\r\n                <mdb-icon class=\"prefix grey-text\" fas icon=\"universal-access\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"imageUrlEdit\">Profile Image</label>\r\n                <select class=\"form-control\" formControlName=\"authorImageUrl\" id=\"imageUrlEdit\">\r\n                  <option *ngFor=\"let image of imageUrlList\" [ngValue]=\"image\">\r\n                    {{image.title}}\r\n                  </option>\r\n\r\n                </select>\r\n              </div>\r\n\r\n              <div class=\"form-group col-12\">\r\n                <mdb-icon class=\"prefix grey-text\" far icon=\"far fa-comment-alt\"></mdb-icon>\r\n                <label class=\"col-sm-6 col-form-label\" for=\"descriptionEdit\">Description</label>\r\n                <textarea class=\"form-control\" formControlName=\"description\" id=\"descriptionEdit\"\r\n                          type=\"text\" length=\"2000\" mdbCharCounter></textarea>\r\n              </div>\r\n            </div>\r\n\r\n            <div *ngIf=\"editAuthorExist.submitted && isAuthorAlreadyExist\" class=\"alert alert-warning\">\r\n              {{errorMessageAddAuthor}}\r\n            </div>\r\n\r\n            <div class=\"justify-content-center\" style=\"display: flex\">\r\n              <button mdbBtn mdbWavesEffect style=\"background: brown; color: white\"\r\n                      rounded=\"true\" type=\"submit\">Save\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- End Edit Author -->\r\n\r\n<!-- Content -->\r\n<div class=\"row my-5\">\r\n\r\n  <div *ngFor=\"let author of authors\" class=\"col-md-2-custom my-2\">\r\n      <div>\r\n        <div class=\"img-wrapper\">\r\n          <img [src]=\"author.authorImageUrl.imageUrl\">\r\n          <h2>{{author.firstName}} {{author.lastName}}</h2>\r\n          <ul>\r\n            <li>\r\n              <a (click)=\"sendToAuthorInfo(author)\" style=\"color: #2bbbad;\"><i class=\"fas fa-info-circle\"></i></a>\r\n            </li>\r\n            <li>\r\n              <a (click)=\"editFormAuthor(author,frameEditAuthor)\" style=\"color: #ffbb33;\"><i class=\"fas fa-user-edit\"></i></a>\r\n            </li>\r\n            <li>\r\n              <a (click)=\"deleteAuthor(author)\" style=\"color: #ff4444;\"><i class=\"far fa-trash-alt\"></i></a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n  </div>\r\n\r\n</div>\r\n<!-- End Content -->\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpRequest} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {AuthorImageUrl} from '../model/AuthorImageUrl';\r\n\r\nconst API_URL = 'http://localhost:8080/api/author-image/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorImageUrlService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllImages(): Observable<AuthorImageUrl> {\r\n    return this.http.get<AuthorImageUrl>(API_URL);\r\n  }\r\n\r\n  createImageUrl(title: string, file: File): Observable<any> {\r\n    const formData: FormData = new FormData();\r\n    formData.append('title', title);\r\n    formData.append('file', file);\r\n\r\n    const req = new HttpRequest('POST', API_URL, formData, {\r\n      reportProgress: true,\r\n      responseType: 'json'\r\n    });\r\n\r\n    return this.http.request(req);\r\n  }\r\n\r\n  deleteImageById(id: number): Observable<AuthorImageUrl> {\r\n    return this.http.delete<AuthorImageUrl>(API_URL + id);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {ReservationState} from '../model/ReservationState';\r\n\r\nconst API_URL = 'http://localhost:8080/api/state/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReservationStateService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllStates(): Observable<ReservationState> {\r\n    return this.http.get<ReservationState>(API_URL);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Reservation} from '../model/Reservation';\r\n\r\nconst API_URL = 'http://localhost:8080/api/reservations/';\r\nconst API_URL_PROFILE = 'http://localhost:8080/api/reservations/profile/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReservationService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllReservationsFromDb(): Observable<Reservation> {\r\n    return this.http.get<Reservation>(API_URL);\r\n  }\r\n\r\n  getReservationById(id: number): Observable<Reservation> {\r\n    return this.http.get<Reservation>(API_URL + id);\r\n  }\r\n\r\n  getReservationsByUserId(userId: number, params) {\r\n    return this.http.get<Reservation>(API_URL_PROFILE + userId, {params});\r\n  }\r\n\r\n  addReservation(reservation: Reservation): Observable<Reservation> {\r\n    return this.http.post<Reservation>(API_URL, {\r\n      bookList: reservation.bookList,\r\n      user: reservation.user,\r\n      client: reservation.client,\r\n      startDate: reservation.startDate,\r\n      endDate: reservation.endDate,\r\n      reservationState: reservation.reservationState\r\n    }, httpOptions);\r\n  }\r\n\r\n  editReservationById(id: number, reservation: Reservation): Observable<Reservation> {\r\n    return this.http.put<Reservation>(API_URL + id, {\r\n      bookList: reservation.bookList,\r\n      user: reservation.user,\r\n      client: reservation.client,\r\n      startDate: reservation.startDate,\r\n      endDate: reservation.endDate,\r\n      reservationState: reservation.reservationState\r\n    }, httpOptions);\r\n  }\r\n\r\n  deleteReservationById(id: number): Observable<Reservation> {\r\n    return this.http.delete<Reservation>(API_URL + id);\r\n  }\r\n\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Author} from '../model/Author';\r\n\r\nconst API_URL = 'http://localhost:8080/api/authors/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllAuthors(): Observable<Author> {\r\n    return this.http.get<Author>(API_URL);\r\n  }\r\n\r\n  addAuthor(author: Author): Observable<Author> {\r\n    return this.http.post<Author>(API_URL, {\r\n      firstName: author.firstName,\r\n      lastName: author.lastName,\r\n      dateOfBirth: author.dateOfBirth,\r\n      nationality: author.nationality,\r\n      description: author.description,\r\n      type: author.type,\r\n      authorImageUrl: author.authorImageUrl\r\n    }, httpOptions);\r\n  }\r\n\r\n  editAuthorById(id: number, author): Observable<Author> {\r\n    return this.http.put<Author>(API_URL + id, {\r\n      firstName: author.firstName,\r\n      lastName: author.lastName,\r\n      dateOfBirth: author.dateOfBirth,\r\n      nationality: author.nationality,\r\n      description: author.description,\r\n      type: author.type,\r\n      authorImageUrl: author.authorImageUrl\r\n    }, httpOptions);\r\n  }\r\n\r\n  getAuthorById(id: number) {\r\n    return this.http.get<Author>(API_URL + id);\r\n  }\r\n\r\n  deleteAuthorById(id: number): Observable<Author> {\r\n    return this.http.delete<Author>(API_URL + id);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Fictional} from '../model/Fictional';\r\nimport {Nonfictional} from '../model/Nonfictional';\r\nimport {BookCategory} from '../model/BookCategory';\r\n\r\nconst API_URL_FICTIONAL = 'http://localhost:8080/api/fictional/';\r\nconst API_URL_NONFICTIONAL = 'http://localhost:8080/api/nonfictional/';\r\nconst API_URL_BOOK_CATEGORY = 'http://localhost:8080/api/book-category/';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookCategoryTypeService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllFictional(): Observable<Fictional> {\r\n    return this.http.get<Fictional>(API_URL_FICTIONAL);\r\n  }\r\n\r\n  getAllNonfictional(): Observable<Nonfictional> {\r\n    return this.http.get<Nonfictional>(API_URL_NONFICTIONAL);\r\n  }\r\n\r\n  getAllBookCategories(): Observable<BookCategory> {\r\n    return this.http.get<BookCategory>(API_URL_BOOK_CATEGORY);\r\n  }\r\n}\r\n","import {HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\n\r\nimport {TokenStorageService} from '../_services/token-storage.service';\r\nimport {Observable} from 'rxjs';\r\n\r\nconst TOKEN_HEADER_KEY = 'Authorization';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n    constructor(private token: TokenStorageService) {\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        let authReq = req;\r\n        const token = this.token.getToken();\r\n        if (token != null) {\r\n\r\n            // for Spring Boot back-end\r\n            authReq = req.clone({headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)});\r\n\r\n        }\r\n        return next.handle(authReq);\r\n    }\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}\r\n];\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {HomeComponent} from './home/home.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegisterComponent} from './register/register.component';\r\nimport {ProfileComponent} from './profile/profile.component';\r\nimport {DashboardComponent} from './dashboard/dashboard.component';\r\nimport {NotFoundComponent} from './_errors/not-found/not-found.component';\r\nimport {UserComponent} from './user/user.component';\r\nimport {AuthorComponent} from './_core/author/author.component';\r\nimport {BookComponent} from './_core/book/book.component';\r\nimport {MediaComponent} from './_core/media/media.component';\r\nimport {AuthorDetailsComponent} from './_core/author/author-details/author-details.component';\r\nimport {StatsCardComponent} from './dashboard/stats-card/stats-card.component';\r\nimport {ClientComponent} from './_core/client/client.component';\r\nimport {ReservationComponent} from './_core/reservation/reservation.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', redirectTo: 'home', pathMatch: 'full'},\r\n  {path: 'home', component: HomeComponent},\r\n  {path: 'login', component: LoginComponent},\r\n  {path: 'register', component: RegisterComponent},\r\n  {path: 'dashboard', component: DashboardComponent,\r\n    children: [\r\n      {\r\n        path: 'user', component: UserComponent\r\n      },\r\n      {\r\n        path: 'reservation', component: ReservationComponent\r\n      },\r\n      {\r\n        path: 'author', component: AuthorComponent,\r\n      },\r\n      {\r\n        path: 'author/:id', component: AuthorDetailsComponent\r\n      },\r\n      {\r\n        path: 'profile/:id', component: ProfileComponent,\r\n        runGuardsAndResolvers: 'always'\r\n      },\r\n      {\r\n        path: 'book', component: BookComponent\r\n      },\r\n      {\r\n        path: 'media', component: MediaComponent,\r\n        runGuardsAndResolvers: 'always'\r\n      },\r\n      {\r\n        path: 'client', component: ClientComponent\r\n      },\r\n      {\r\n        path: '', component: StatsCardComponent\r\n      }\r\n    ]\r\n  },\r\n  {path: '**', component: NotFoundComponent}\r\n];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AuthService} from '../_services/auth.service';\r\nimport {TokenStorageService} from '../_services/token-storage.service';\r\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {MDBModalRef} from 'ng-uikit-pro-standard';\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    form: any = {};\r\n    isLoggedIn = false;\r\n    isLoginFailed = false;\r\n    errorMessage = '';\r\n    roles: string[] = [];\r\n\r\n    validatingForm: FormGroup;\r\n\r\n    constructor(private authService: AuthService,\r\n                private tokenStorage: TokenStorageService,\r\n                public modalRef: MDBModalRef,\r\n                private router: Router) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.tokenStorage.getToken()) {\r\n            this.isLoggedIn = true;\r\n            this.roles = this.tokenStorage.getUser().roles;\r\n\r\n        }\r\n\r\n        this.validatingForm = new FormGroup({\r\n            modalFormElegantEmail: new FormControl('', Validators.email),\r\n            modalFormElegantPassword: new FormControl('', Validators.required)\r\n        });\r\n    }\r\n\r\n    onSubmit(): void {\r\n        this.authService.login(this.form).subscribe(\r\n            data => {\r\n                this.tokenStorage.saveToken(data.token);\r\n                this.tokenStorage.saveUser(data);\r\n\r\n                this.isLoginFailed = false;\r\n                this.isLoggedIn = true;\r\n                this.roles = this.tokenStorage.getUser().roles;\r\n                this.reloadPage();\r\n            },\r\n            err => {\r\n                this.errorMessage = err.error.message;\r\n                this.isLoginFailed = true;\r\n            }\r\n        );\r\n    }\r\n\r\n    reloadPage(): void {\r\n        this.router.navigateByUrl('/dashboard').then(this.modalRef.hide);\r\n    }\r\n\r\n    get modalFormElegantEmail() {\r\n        return this.validatingForm.get('modalFormElegantEmail');\r\n    }\r\n\r\n    get modalFormElegantPassword() {\r\n        return this.validatingForm.get('modalFormElegantPassword');\r\n    }\r\n\r\n}\r\n","<!--Content-->\r\n<div class=\"modal-content form-elegant\">\r\n    <!--Header-->\r\n    <div class=\"modal-header text-center\">\r\n        <h3 class=\"modal-title w-100 dark-grey-text font-weight-bold my-3\" id=\"myModalLabel\">\r\n            <strong>Sign in</strong>\r\n        </h3>\r\n        <button (click)=\"modalRef.hide()\" aria-label=\"Close\" class=\"close\" data-dismiss=\"modal\"\r\n                type=\"button\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n    <!--Body-->\r\n    <form #f=\"ngForm\"\r\n          (ngSubmit)=\"f.form.valid && onSubmit()\"\r\n          *ngIf=\"!isLoggedIn\"\r\n          name=\"form\"\r\n          novalidate\r\n    >\r\n        <div class=\"modal-body mx-4\">\r\n            <!--Body-->\r\n            <div class=\"md-form mb-5\">\r\n                <input [(ngModel)]=\"form.email\" [formControl]=\"modalFormElegantEmail\" class=\"form-control\"\r\n                       id=\"Form-email1\"\r\n                       mdbInput\r\n                       mdbValidate\r\n                       name=\"email\"\r\n                       type=\"email\">\r\n                <label for=\"Form-email1\">Your email</label>\r\n                <mdb-error\r\n                        *ngIf=\"modalFormElegantEmail.invalid && (modalFormElegantEmail.dirty || modalFormElegantEmail.touched)\">\r\n                    Incorrect email format !\r\n                </mdb-error>\r\n                <mdb-success\r\n                        *ngIf=\"modalFormElegantEmail.valid && (modalFormElegantEmail.dirty || modalFormElegantEmail.touched)\">Input\r\n                    valid\r\n                </mdb-success>\r\n            </div>\r\n            <div class=\"md-form pb-3\">\r\n                <input [(ngModel)]=\"form.password\" [formControl]=\"modalFormElegantPassword\" class=\"form-control\"\r\n                       id=\"Form-pass1\"\r\n                       mdbInput\r\n                       mdbValidate\r\n                       minlength=\"6\"\r\n                       name=\"password\"\r\n                       type=\"password\">\r\n                <label for=\"Form-pass1\">Your password</label>\r\n                <mdb-error\r\n                        *ngIf=\"modalFormElegantPassword.invalid && (modalFormElegantPassword.dirty || modalFormElegantPassword.touched)\">\r\n                    Minimum length must be 6 characters !\r\n                </mdb-error>\r\n\r\n                <mdb-success\r\n                        *ngIf=\"modalFormElegantPassword.valid && (modalFormElegantPassword.dirty || modalFormElegantPassword.touched)\">\r\n                    Input valid\r\n                </mdb-success>\r\n                <p class=\"font-small blue-text d-flex justify-content-end\">Forgot\r\n                    <a class=\"blue-text ml-1\" href=\"#\"> Password?</a>\r\n                </p>\r\n            </div>\r\n            <div class=\"text-center mb-3\">\r\n                <button block=\"true\" class=\"z-depth-1a waves-light\" gradient=\"blue\" mdbBtn mdbWavesEffect\r\n                        rounded=\"true\"\r\n                        type=\"submit\">Sign in\r\n                </button>\r\n            </div>\r\n\r\n            <p class=\"font-small dark-grey-text text-right d-flex justify-content-center mb-3 pt-2\"> or Sign in\r\n                with:</p>\r\n            <div class=\"row my-3 d-flex justify-content-center\">\r\n                <!--Facebook-->\r\n                <button class=\"mr-md-3 z-depth-1a waves-light\" color=\"white\" mdbBtn mdbWavesEffect rounded=\"true\"\r\n                        type=\"button\">\r\n                    <mdb-icon class=\"text-center\" fab icon=\"facebook-f\"></mdb-icon>\r\n                </button>\r\n                <!--Twitter-->\r\n                <button class=\"mr-md-3 z-depth-1a waves-light\" color=\"white\" mdbBtn mdbWavesEffect rounded=\"true\"\r\n                        type=\"button\">\r\n                    <mdb-icon fab icon=\"twitter\"></mdb-icon>\r\n                </button>\r\n                <!--Google +-->\r\n                <button class=\"z-depth-1a waves-light\" color=\"white\" mdbBtn mdbWavesEffect rounded=\"true\"\r\n                        type=\"button\">\r\n                    <mdb-icon fab icon=\"google-plus\"></mdb-icon>\r\n                </button>\r\n            </div>\r\n\r\n            <div *ngIf=\"f.submitted && isLoginFailed\"\r\n                    class=\"alert alert-danger\"\r\n                    role=\"alert\">\r\n                Login failed: {{ errorMessage }}\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    </form>\r\n    <!--Footer-->\r\n    <div class=\"modal-footer mx-5 pt-3 mb-1\">\r\n        <p class=\"font-small grey-text d-flex justify-content-end\">Not a member?\r\n            <a class=\"blue-text ml-1\" href=\"#\"> Sign Up</a>\r\n        </p>\r\n    </div>\r\n</div>\r\n<!--/.Content-->\r\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nconst API_URL_AUTHOR = 'http://localhost:8080/api/count-data/author';\nconst API_URL_USER = 'http://localhost:8080/api/count-data/user';\nconst API_URL_BOOK = 'http://localhost:8080/api/count-data/book';\nconst API_URL_RESERVATION = 'http://localhost:8080/api/count-data/reservation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatsService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAuthorsCount(): Observable<any> {\n    return this.http.get(API_URL_AUTHOR);\n  }\n\n  getUsersCount(): Observable<any> {\n    return this.http.get(API_URL_USER);\n  }\n\n  getBooksCount(): Observable<any> {\n    return this.http.get(API_URL_BOOK);\n  }\n\n  getReservationsCount(): Observable<any> {\n    return this.http.get(API_URL_RESERVATION);\n  }\n}\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}